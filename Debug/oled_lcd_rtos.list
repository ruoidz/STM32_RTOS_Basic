
oled_lcd_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006654  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e5c  080067e4  080067e4  000167e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007640  08007640  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007640  08007640  00017640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007648  08007648  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007648  08007648  00017648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800764c  0800764c  0001764c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000046cc  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004738  20004738  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017248  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003193  00000000  00000000  00037327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001470  00000000  00000000  0003a4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001013  00000000  00000000  0003b930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000235b2  00000000  00000000  0003c943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001822c  00000000  00000000  0005fef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6706  00000000  00000000  00078121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005af0  00000000  00000000  0014e828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00154318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067cc 	.word	0x080067cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080067cc 	.word	0x080067cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a30:	f000 b970 	b.w	8000d14 <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9e08      	ldr	r6, [sp, #32]
 8000a52:	460d      	mov	r5, r1
 8000a54:	4604      	mov	r4, r0
 8000a56:	460f      	mov	r7, r1
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d14a      	bne.n	8000af2 <__udivmoddi4+0xa6>
 8000a5c:	428a      	cmp	r2, r1
 8000a5e:	4694      	mov	ip, r2
 8000a60:	d965      	bls.n	8000b2e <__udivmoddi4+0xe2>
 8000a62:	fab2 f382 	clz	r3, r2
 8000a66:	b143      	cbz	r3, 8000a7a <__udivmoddi4+0x2e>
 8000a68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a6c:	f1c3 0220 	rsb	r2, r3, #32
 8000a70:	409f      	lsls	r7, r3
 8000a72:	fa20 f202 	lsr.w	r2, r0, r2
 8000a76:	4317      	orrs	r7, r2
 8000a78:	409c      	lsls	r4, r3
 8000a7a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a7e:	fa1f f58c 	uxth.w	r5, ip
 8000a82:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a86:	0c22      	lsrs	r2, r4, #16
 8000a88:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a8c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a90:	fb01 f005 	mul.w	r0, r1, r5
 8000a94:	4290      	cmp	r0, r2
 8000a96:	d90a      	bls.n	8000aae <__udivmoddi4+0x62>
 8000a98:	eb1c 0202 	adds.w	r2, ip, r2
 8000a9c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000aa0:	f080 811c 	bcs.w	8000cdc <__udivmoddi4+0x290>
 8000aa4:	4290      	cmp	r0, r2
 8000aa6:	f240 8119 	bls.w	8000cdc <__udivmoddi4+0x290>
 8000aaa:	3902      	subs	r1, #2
 8000aac:	4462      	add	r2, ip
 8000aae:	1a12      	subs	r2, r2, r0
 8000ab0:	b2a4      	uxth	r4, r4
 8000ab2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ab6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000abe:	fb00 f505 	mul.w	r5, r0, r5
 8000ac2:	42a5      	cmp	r5, r4
 8000ac4:	d90a      	bls.n	8000adc <__udivmoddi4+0x90>
 8000ac6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aca:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ace:	f080 8107 	bcs.w	8000ce0 <__udivmoddi4+0x294>
 8000ad2:	42a5      	cmp	r5, r4
 8000ad4:	f240 8104 	bls.w	8000ce0 <__udivmoddi4+0x294>
 8000ad8:	4464      	add	r4, ip
 8000ada:	3802      	subs	r0, #2
 8000adc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ae0:	1b64      	subs	r4, r4, r5
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	b11e      	cbz	r6, 8000aee <__udivmoddi4+0xa2>
 8000ae6:	40dc      	lsrs	r4, r3
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e9c6 4300 	strd	r4, r3, [r6]
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0xbc>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	f000 80ed 	beq.w	8000cd6 <__udivmoddi4+0x28a>
 8000afc:	2100      	movs	r1, #0
 8000afe:	e9c6 0500 	strd	r0, r5, [r6]
 8000b02:	4608      	mov	r0, r1
 8000b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b08:	fab3 f183 	clz	r1, r3
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	d149      	bne.n	8000ba4 <__udivmoddi4+0x158>
 8000b10:	42ab      	cmp	r3, r5
 8000b12:	d302      	bcc.n	8000b1a <__udivmoddi4+0xce>
 8000b14:	4282      	cmp	r2, r0
 8000b16:	f200 80f8 	bhi.w	8000d0a <__udivmoddi4+0x2be>
 8000b1a:	1a84      	subs	r4, r0, r2
 8000b1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b20:	2001      	movs	r0, #1
 8000b22:	4617      	mov	r7, r2
 8000b24:	2e00      	cmp	r6, #0
 8000b26:	d0e2      	beq.n	8000aee <__udivmoddi4+0xa2>
 8000b28:	e9c6 4700 	strd	r4, r7, [r6]
 8000b2c:	e7df      	b.n	8000aee <__udivmoddi4+0xa2>
 8000b2e:	b902      	cbnz	r2, 8000b32 <__udivmoddi4+0xe6>
 8000b30:	deff      	udf	#255	; 0xff
 8000b32:	fab2 f382 	clz	r3, r2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f040 8090 	bne.w	8000c5c <__udivmoddi4+0x210>
 8000b3c:	1a8a      	subs	r2, r1, r2
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2101      	movs	r1, #1
 8000b48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b50:	0c22      	lsrs	r2, r4, #16
 8000b52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b56:	fb0e f005 	mul.w	r0, lr, r5
 8000b5a:	4290      	cmp	r0, r2
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x124>
 8000b5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x122>
 8000b68:	4290      	cmp	r0, r2
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2b8>
 8000b6e:	4645      	mov	r5, r8
 8000b70:	1a12      	subs	r2, r2, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b78:	fb07 2210 	mls	r2, r7, r0, r2
 8000b7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x14e>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x14c>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2c2>
 8000b98:	4610      	mov	r0, r2
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ba2:	e79f      	b.n	8000ae4 <__udivmoddi4+0x98>
 8000ba4:	f1c1 0720 	rsb	r7, r1, #32
 8000ba8:	408b      	lsls	r3, r1
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bb6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bba:	40fd      	lsrs	r5, r7
 8000bbc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc0:	4323      	orrs	r3, r4
 8000bc2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bc6:	fa1f fe8c 	uxth.w	lr, ip
 8000bca:	fb09 5518 	mls	r5, r9, r8, r5
 8000bce:	0c1c      	lsrs	r4, r3, #16
 8000bd0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bd4:	fb08 f50e 	mul.w	r5, r8, lr
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	fa02 f201 	lsl.w	r2, r2, r1
 8000bde:	fa00 f001 	lsl.w	r0, r0, r1
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b0>
 8000be4:	eb1c 0404 	adds.w	r4, ip, r4
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2b4>
 8000bf0:	42a5      	cmp	r5, r4
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2b4>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4464      	add	r4, ip
 8000bfc:	1b64      	subs	r4, r4, r5
 8000bfe:	b29d      	uxth	r5, r3
 8000c00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c04:	fb09 4413 	mls	r4, r9, r3, r4
 8000c08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1da>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2ac>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2ac>
 8000c22:	3b02      	subs	r3, #2
 8000c24:	4464      	add	r4, ip
 8000c26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c2e:	eba4 040e 	sub.w	r4, r4, lr
 8000c32:	42ac      	cmp	r4, r5
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46ae      	mov	lr, r5
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x29c>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x298>
 8000c3c:	b156      	cbz	r6, 8000c54 <__udivmoddi4+0x208>
 8000c3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c42:	eb64 040e 	sbc.w	r4, r4, lr
 8000c46:	fa04 f707 	lsl.w	r7, r4, r7
 8000c4a:	40ca      	lsrs	r2, r1
 8000c4c:	40cc      	lsrs	r4, r1
 8000c4e:	4317      	orrs	r7, r2
 8000c50:	e9c6 7400 	strd	r7, r4, [r6]
 8000c54:	4618      	mov	r0, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5c:	f1c3 0120 	rsb	r1, r3, #32
 8000c60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c64:	fa20 f201 	lsr.w	r2, r0, r1
 8000c68:	fa25 f101 	lsr.w	r1, r5, r1
 8000c6c:	409d      	lsls	r5, r3
 8000c6e:	432a      	orrs	r2, r5
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c80:	0c11      	lsrs	r1, r2, #16
 8000c82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c86:	fb00 f50e 	mul.w	r5, r0, lr
 8000c8a:	428d      	cmp	r5, r1
 8000c8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x258>
 8000c92:	eb1c 0101 	adds.w	r1, ip, r1
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b0>
 8000c9c:	428d      	cmp	r5, r1
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b0>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1b49      	subs	r1, r1, r5
 8000ca6:	b292      	uxth	r2, r2
 8000ca8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cac:	fb07 1115 	mls	r1, r7, r5, r1
 8000cb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cb8:	4291      	cmp	r1, r2
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x282>
 8000cbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2a8>
 8000cc6:	4291      	cmp	r1, r2
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2a8>
 8000cca:	3d02      	subs	r5, #2
 8000ccc:	4462      	add	r2, ip
 8000cce:	1a52      	subs	r2, r2, r1
 8000cd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0xfc>
 8000cd6:	4631      	mov	r1, r6
 8000cd8:	4630      	mov	r0, r6
 8000cda:	e708      	b.n	8000aee <__udivmoddi4+0xa2>
 8000cdc:	4639      	mov	r1, r7
 8000cde:	e6e6      	b.n	8000aae <__udivmoddi4+0x62>
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	e6fb      	b.n	8000adc <__udivmoddi4+0x90>
 8000ce4:	4548      	cmp	r0, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f0>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f0>
 8000cf4:	4645      	mov	r5, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x282>
 8000cf8:	462b      	mov	r3, r5
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1da>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x258>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b0>
 8000d04:	3d02      	subs	r5, #2
 8000d06:	4462      	add	r2, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x124>
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	e70a      	b.n	8000b24 <__udivmoddi4+0xd8>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x14e>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <vApplicationGetIdleTaskMemory+0x30>)
 8000d2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2280      	movs	r2, #128	; 0x80
 8000d34:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000088 	.word	0x20000088
 8000d48:	20000128 	.word	0x20000128

08000d4c <microDelay>:
char strCopyTemp[8];
char strCopyHumi[8];
char strspace[3]="  \n";
char *data="hello";
void microDelay (uint16_t delay)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <microDelay+0x30>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000d5e:	bf00      	nop
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <microDelay+0x30>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d3f9      	bcc.n	8000d60 <microDelay+0x14>
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	2000037c 	.word	0x2000037c

08000d80 <DHT11_Start>:
uint8_t DHT11_Start (void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d9c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000daa:	463b      	mov	r3, r7
 8000dac:	4619      	mov	r1, r3
 8000dae:	482d      	ldr	r0, [pc, #180]	; (8000e64 <DHT11_Start+0xe4>)
 8000db0:	f001 fa30 	bl	8002214 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dba:	482a      	ldr	r0, [pc, #168]	; (8000e64 <DHT11_Start+0xe4>)
 8000dbc:	f001 fbde 	bl	800257c <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000dc0:	2014      	movs	r0, #20
 8000dc2:	f001 f921 	bl	8002008 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dcc:	4825      	ldr	r0, [pc, #148]	; (8000e64 <DHT11_Start+0xe4>)
 8000dce:	f001 fbd5 	bl	800257c <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000dd2:	201e      	movs	r0, #30
 8000dd4:	f7ff ffba 	bl	8000d4c <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	481f      	ldr	r0, [pc, #124]	; (8000e64 <DHT11_Start+0xe4>)
 8000de6:	f001 fa15 	bl	8002214 <HAL_GPIO_Init>
  microDelay (40);
 8000dea:	2028      	movs	r0, #40	; 0x28
 8000dec:	f7ff ffae 	bl	8000d4c <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df4:	481b      	ldr	r0, [pc, #108]	; (8000e64 <DHT11_Start+0xe4>)
 8000df6:	f001 fba9 	bl	800254c <HAL_GPIO_ReadPin>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10c      	bne.n	8000e1a <DHT11_Start+0x9a>
  {
    microDelay (80);
 8000e00:	2050      	movs	r0, #80	; 0x50
 8000e02:	f7ff ffa3 	bl	8000d4c <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000e06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e0a:	4816      	ldr	r0, [pc, #88]	; (8000e64 <DHT11_Start+0xe4>)
 8000e0c:	f001 fb9e 	bl	800254c <HAL_GPIO_ReadPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <DHT11_Start+0x9a>
 8000e16:	2301      	movs	r3, #1
 8000e18:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000e1a:	f001 f8e9 	bl	8001ff0 <HAL_GetTick>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a11      	ldr	r2, [pc, #68]	; (8000e68 <DHT11_Start+0xe8>)
 8000e22:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000e24:	f001 f8e4 	bl	8001ff0 <HAL_GetTick>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <DHT11_Start+0xec>)
 8000e2c:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e2e:	e004      	b.n	8000e3a <DHT11_Start+0xba>
  {
    cMillis = HAL_GetTick();
 8000e30:	f001 f8de 	bl	8001ff0 <HAL_GetTick>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <DHT11_Start+0xec>)
 8000e38:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e3e:	4809      	ldr	r0, [pc, #36]	; (8000e64 <DHT11_Start+0xe4>)
 8000e40:	f001 fb84 	bl	800254c <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d006      	beq.n	8000e58 <DHT11_Start+0xd8>
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <DHT11_Start+0xe8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	1c9a      	adds	r2, r3, #2
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <DHT11_Start+0xec>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8eb      	bhi.n	8000e30 <DHT11_Start+0xb0>
  }
  return Response;
 8000e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40020400 	.word	0x40020400
 8000e68:	20000424 	.word	0x20000424
 8000e6c:	20000428 	.word	0x20000428

08000e70 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	71fb      	strb	r3, [r7, #7]
 8000e7a:	e066      	b.n	8000f4a <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8000e7c:	f001 f8b8 	bl	8001ff0 <HAL_GetTick>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4a36      	ldr	r2, [pc, #216]	; (8000f5c <DHT11_Read+0xec>)
 8000e84:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000e86:	f001 f8b3 	bl	8001ff0 <HAL_GetTick>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4a34      	ldr	r2, [pc, #208]	; (8000f60 <DHT11_Read+0xf0>)
 8000e8e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e90:	e004      	b.n	8000e9c <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8000e92:	f001 f8ad 	bl	8001ff0 <HAL_GetTick>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4a31      	ldr	r2, [pc, #196]	; (8000f60 <DHT11_Read+0xf0>)
 8000e9a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea0:	4830      	ldr	r0, [pc, #192]	; (8000f64 <DHT11_Read+0xf4>)
 8000ea2:	f001 fb53 	bl	800254c <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d106      	bne.n	8000eba <DHT11_Read+0x4a>
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <DHT11_Read+0xec>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	1c9a      	adds	r2, r3, #2
 8000eb2:	4b2b      	ldr	r3, [pc, #172]	; (8000f60 <DHT11_Read+0xf0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d8eb      	bhi.n	8000e92 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8000eba:	2028      	movs	r0, #40	; 0x28
 8000ebc:	f7ff ff46 	bl	8000d4c <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000ec0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec4:	4827      	ldr	r0, [pc, #156]	; (8000f64 <DHT11_Read+0xf4>)
 8000ec6:	f001 fb41 	bl	800254c <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10e      	bne.n	8000eee <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	b25a      	sxtb	r2, r3
 8000ee2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	71bb      	strb	r3, [r7, #6]
 8000eec:	e00b      	b.n	8000f06 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f1c3 0307 	rsb	r3, r3, #7
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	b25a      	sxtb	r2, r3
 8000efc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8000f06:	f001 f873 	bl	8001ff0 <HAL_GetTick>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <DHT11_Read+0xec>)
 8000f0e:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000f10:	f001 f86e 	bl	8001ff0 <HAL_GetTick>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <DHT11_Read+0xf0>)
 8000f18:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f1a:	e004      	b.n	8000f26 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8000f1c:	f001 f868 	bl	8001ff0 <HAL_GetTick>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <DHT11_Read+0xf0>)
 8000f24:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2a:	480e      	ldr	r0, [pc, #56]	; (8000f64 <DHT11_Read+0xf4>)
 8000f2c:	f001 fb0e 	bl	800254c <HAL_GPIO_ReadPin>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d006      	beq.n	8000f44 <DHT11_Read+0xd4>
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <DHT11_Read+0xec>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	1c9a      	adds	r2, r3, #2
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <DHT11_Read+0xf0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8eb      	bhi.n	8000f1c <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	3301      	adds	r3, #1
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b07      	cmp	r3, #7
 8000f4e:	d995      	bls.n	8000e7c <DHT11_Read+0xc>
    }
  }
  return b;
 8000f50:	79bb      	ldrb	r3, [r7, #6]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000424 	.word	0x20000424
 8000f60:	20000428 	.word	0x20000428
 8000f64:	40020400 	.word	0x40020400

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b09c      	sub	sp, #112	; 0x70
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6e:	f001 f809 	bl	8001f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f72:	f000 f883 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f000 f9b5 	bl	80012e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f7a:	f000 f8e7 	bl	800114c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f7e:	f000 f913 	bl	80011a8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000f82:	f000 f985 	bl	8001290 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000f86:	f000 fb59 	bl	800163c <SSD1306_Init>
  HAL_TIM_Base_Start(&htim1);
 8000f8a:	4831      	ldr	r0, [pc, #196]	; (8001050 <main+0xe8>)
 8000f8c:	f002 fdb6 	bl	8003afc <HAL_TIM_Base_Start>
  SSD1306_Init();
 8000f90:	f000 fb54 	bl	800163c <SSD1306_Init>
  SSD1306_GotoXY (0,0);
 8000f94:	2100      	movs	r1, #0
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 fcba 	bl	8001910 <SSD1306_GotoXY>
  SSD1306_Puts ("DHT11", &Font_11x18, 1);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	492d      	ldr	r1, [pc, #180]	; (8001054 <main+0xec>)
 8000fa0:	482d      	ldr	r0, [pc, #180]	; (8001058 <main+0xf0>)
 8000fa2:	f000 fd4b 	bl	8001a3c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000fa6:	f000 fc0d 	bl	80017c4 <SSD1306_UpdateScreen>
  HAL_Delay (1000);
 8000faa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fae:	f001 f82b 	bl	8002008 <HAL_Delay>
  SSD1306_Clear();
 8000fb2:	f000 fd68 	bl	8001a86 <SSD1306_Clear>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000fb6:	4b29      	ldr	r3, [pc, #164]	; (800105c <main+0xf4>)
 8000fb8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000fbc:	461d      	mov	r5, r3
 8000fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000fca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 f86a 	bl	80050aa <osThreadCreate>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a21      	ldr	r2, [pc, #132]	; (8001060 <main+0xf8>)
 8000fda:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(Taskoled, oledTask, osPriorityAboveNormal, 1, 128);
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <main+0xfc>)
 8000fde:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000fe2:	461d      	mov	r5, r3
 8000fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  oled = osThreadCreate(osThread(Taskoled), NULL);
 8000ff0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f004 f857 	bl	80050aa <osThreadCreate>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <main+0x100>)
 8001000:	6013      	str	r3, [r2, #0]
  osThreadDef(Tasktransmit, transmitTask, osPriorityAboveNormal, 1, 128);
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <main+0x104>)
 8001004:	f107 041c 	add.w	r4, r7, #28
 8001008:	461d      	mov	r5, r3
 800100a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001012:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmit = osThreadCreate(osThread(Tasktransmit), NULL);
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f004 f844 	bl	80050aa <osThreadCreate>
 8001022:	4603      	mov	r3, r0
 8001024:	4a12      	ldr	r2, [pc, #72]	; (8001070 <main+0x108>)
 8001026:	6013      	str	r3, [r2, #0]
  osThreadDef(Taskdht, dht11Task, osPriorityAboveNormal, 1, 128);
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <main+0x10c>)
 800102a:	463c      	mov	r4, r7
 800102c:	461d      	mov	r5, r3
 800102e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001032:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001036:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dht11 = osThreadCreate(osThread(Taskdht), NULL);
 800103a:	463b      	mov	r3, r7
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f004 f833 	bl	80050aa <osThreadCreate>
 8001044:	4603      	mov	r3, r0
 8001046:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <main+0x110>)
 8001048:	6013      	str	r3, [r2, #0]
  //hcsr04 = osThreadCreate(osThread(Taskhcsr04), NULL);
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800104a:	f004 f827 	bl	800509c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800104e:	e7fe      	b.n	800104e <main+0xe6>
 8001050:	2000037c 	.word	0x2000037c
 8001054:	20000000 	.word	0x20000000
 8001058:	080067ec 	.word	0x080067ec
 800105c:	08006800 	.word	0x08006800
 8001060:	2000040c 	.word	0x2000040c
 8001064:	08006828 	.word	0x08006828
 8001068:	20000414 	.word	0x20000414
 800106c:	08006854 	.word	0x08006854
 8001070:	20000418 	.word	0x20000418
 8001074:	08006878 	.word	0x08006878
 8001078:	20000410 	.word	0x20000410

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2230      	movs	r2, #48	; 0x30
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f005 fac2 	bl	8006614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <SystemClock_Config+0xc8>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	4a26      	ldr	r2, [pc, #152]	; (8001144 <SystemClock_Config+0xc8>)
 80010aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ae:	6413      	str	r3, [r2, #64]	; 0x40
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <SystemClock_Config+0xc8>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	4b21      	ldr	r3, [pc, #132]	; (8001148 <SystemClock_Config+0xcc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a20      	ldr	r2, [pc, #128]	; (8001148 <SystemClock_Config+0xcc>)
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <SystemClock_Config+0xcc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d8:	2302      	movs	r3, #2
 80010da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e0:	2310      	movs	r3, #16
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e4:	2302      	movs	r3, #2
 80010e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010ec:	2308      	movs	r3, #8
 80010ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010f0:	2348      	movs	r3, #72	; 0x48
 80010f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fc:	f107 0320 	add.w	r3, r7, #32
 8001100:	4618      	mov	r0, r3
 8001102:	f002 f821 	bl	8003148 <HAL_RCC_OscConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800110c:	f000 fa91 	bl	8001632 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001110:	230f      	movs	r3, #15
 8001112:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001114:	2302      	movs	r3, #2
 8001116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800111c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001120:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2102      	movs	r1, #2
 800112c:	4618      	mov	r0, r3
 800112e:	f002 fa83 	bl	8003638 <HAL_RCC_ClockConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001138:	f000 fa7b 	bl	8001632 <Error_Handler>
  }
}
 800113c:	bf00      	nop
 800113e:	3750      	adds	r7, #80	; 0x50
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	40007000 	.word	0x40007000

0800114c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_I2C1_Init+0x50>)
 8001152:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <MX_I2C1_Init+0x54>)
 8001154:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_I2C1_Init+0x50>)
 8001158:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <MX_I2C1_Init+0x58>)
 800115a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_I2C1_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_I2C1_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_I2C1_Init+0x50>)
 800116a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800116e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <MX_I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_I2C1_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <MX_I2C1_Init+0x50>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_I2C1_Init+0x50>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <MX_I2C1_Init+0x50>)
 800118a:	f001 fa11 	bl	80025b0 <HAL_I2C_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001194:	f000 fa4d 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000328 	.word	0x20000328
 80011a0:	40005400 	.word	0x40005400
 80011a4:	00061a80 	.word	0x00061a80

080011a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ae:	f107 0318 	add.w	r3, r7, #24
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011c6:	463b      	mov	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <MX_TIM1_Init+0xe0>)
 80011d4:	4a2d      	ldr	r2, [pc, #180]	; (800128c <MX_TIM1_Init+0xe4>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <MX_TIM1_Init+0xe0>)
 80011da:	2247      	movs	r2, #71	; 0x47
 80011dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <MX_TIM1_Init+0xe0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <MX_TIM1_Init+0xe0>)
 80011e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <MX_TIM1_Init+0xe0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011f2:	4b25      	ldr	r3, [pc, #148]	; (8001288 <MX_TIM1_Init+0xe0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MX_TIM1_Init+0xe0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011fe:	4822      	ldr	r0, [pc, #136]	; (8001288 <MX_TIM1_Init+0xe0>)
 8001200:	f002 fc2c 	bl	8003a5c <HAL_TIM_Base_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800120a:	f000 fa12 	bl	8001632 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001212:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001214:	f107 0318 	add.w	r3, r7, #24
 8001218:	4619      	mov	r1, r3
 800121a:	481b      	ldr	r0, [pc, #108]	; (8001288 <MX_TIM1_Init+0xe0>)
 800121c:	f002 ff2b 	bl	8004076 <HAL_TIM_ConfigClockSource>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001226:	f000 fa04 	bl	8001632 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800122a:	4817      	ldr	r0, [pc, #92]	; (8001288 <MX_TIM1_Init+0xe0>)
 800122c:	f002 fd3e 	bl	8003cac <HAL_TIM_IC_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001236:	f000 f9fc 	bl	8001632 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4619      	mov	r1, r3
 8001248:	480f      	ldr	r0, [pc, #60]	; (8001288 <MX_TIM1_Init+0xe0>)
 800124a:	f003 fa73 	bl	8004734 <HAL_TIMEx_MasterConfigSynchronization>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001254:	f000 f9ed 	bl	8001632 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001258:	2300      	movs	r3, #0
 800125a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800125c:	2301      	movs	r3, #1
 800125e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <MX_TIM1_Init+0xe0>)
 8001270:	f002 fe65 	bl	8003f3e <HAL_TIM_IC_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800127a:	f000 f9da 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000037c 	.word	0x2000037c
 800128c:	40010000 	.word	0x40010000

08001290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <MX_USART2_UART_Init+0x50>)
 8001298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 800129c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 80012c8:	f003 fac4 	bl	8004854 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012d2:	f000 f9ae 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200003c4 	.word	0x200003c4
 80012e0:	40004400 	.word	0x40004400

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <MX_GPIO_Init+0xc8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a2a      	ldr	r2, [pc, #168]	; (80013ac <MX_GPIO_Init+0xc8>)
 8001304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b28      	ldr	r3, [pc, #160]	; (80013ac <MX_GPIO_Init+0xc8>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <MX_GPIO_Init+0xc8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a23      	ldr	r2, [pc, #140]	; (80013ac <MX_GPIO_Init+0xc8>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_GPIO_Init+0xc8>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_GPIO_Init+0xc8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <MX_GPIO_Init+0xc8>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_GPIO_Init+0xc8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001354:	4816      	ldr	r0, [pc, #88]	; (80013b0 <MX_GPIO_Init+0xcc>)
 8001356:	f001 f911 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001360:	4814      	ldr	r0, [pc, #80]	; (80013b4 <MX_GPIO_Init+0xd0>)
 8001362:	f001 f90b 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 8001366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800136a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	4619      	mov	r1, r3
 800137e:	480c      	ldr	r0, [pc, #48]	; (80013b0 <MX_GPIO_Init+0xcc>)
 8001380:	f000 ff48 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001388:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_GPIO_Init+0xd0>)
 800139e:	f000 ff39 	bl	8002214 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013a2:	bf00      	nop
 80013a4:	3720      	adds	r7, #32
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020400 	.word	0x40020400

080013b8 <dht11Task>:

/* USER CODE BEGIN 4 */
void dht11Task(void const *paramerter)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	ed2d 8b02 	vpush	{d8}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	//uint32_t StartTimedht = xTaskGetTickCount();
	while(1)
	{
		if(DHT11_Start())
 80013c4:	f7ff fcdc 	bl	8000d80 <DHT11_Start>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d07b      	beq.n	80014c6 <dht11Task+0x10e>
		  {
			RHI = DHT11_Read(); // Relative humidity integral
 80013ce:	f7ff fd4f 	bl	8000e70 <DHT11_Read>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <dht11Task+0x118>)
 80013d8:	701a      	strb	r2, [r3, #0]
			RHD = DHT11_Read(); // Relative humidity decimal
 80013da:	f7ff fd49 	bl	8000e70 <DHT11_Read>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <dht11Task+0x11c>)
 80013e4:	701a      	strb	r2, [r3, #0]
			TCI = DHT11_Read(); // Celsius integral
 80013e6:	f7ff fd43 	bl	8000e70 <DHT11_Read>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <dht11Task+0x120>)
 80013f0:	701a      	strb	r2, [r3, #0]
			TCD = DHT11_Read(); // Celsius decimal
 80013f2:	f7ff fd3d 	bl	8000e70 <DHT11_Read>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <dht11Task+0x124>)
 80013fc:	701a      	strb	r2, [r3, #0]
			SUM = DHT11_Read(); // Check sum
 80013fe:	f7ff fd37 	bl	8000e70 <DHT11_Read>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <dht11Task+0x128>)
 8001408:	701a      	strb	r2, [r3, #0]
		    Humi = (RHI<<8)|RHD;
 800140a:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <dht11Task+0x118>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	4a30      	ldr	r2, [pc, #192]	; (80014d4 <dht11Task+0x11c>)
 8001412:	7812      	ldrb	r2, [r2, #0]
 8001414:	4313      	orrs	r3, r2
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	4b31      	ldr	r3, [pc, #196]	; (80014e4 <dht11Task+0x12c>)
 8001420:	edc3 7a00 	vstr	s15, [r3]
		    Temp= (TCI<<8)|TCD;
 8001424:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <dht11Task+0x120>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	4a2c      	ldr	r2, [pc, #176]	; (80014dc <dht11Task+0x124>)
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	4313      	orrs	r3, r2
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <dht11Task+0x130>)
 800143a:	edc3 7a00 	vstr	s15, [r3]
			if (RHI + RHD + TCI + TCD == SUM)
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <dht11Task+0x118>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <dht11Task+0x11c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4413      	add	r3, r2
 800144a:	4a23      	ldr	r2, [pc, #140]	; (80014d8 <dht11Task+0x120>)
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a22      	ldr	r2, [pc, #136]	; (80014dc <dht11Task+0x124>)
 8001452:	7812      	ldrb	r2, [r2, #0]
 8001454:	4413      	add	r3, r2
 8001456:	4a22      	ldr	r2, [pc, #136]	; (80014e0 <dht11Task+0x128>)
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	4293      	cmp	r3, r2
 800145c:	d130      	bne.n	80014c0 <dht11Task+0x108>
			{
			  RH = (float)RHI + (float)(RHD/10.0);
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <dht11Task+0x118>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	ee07 3a90 	vmov	s15, r3
 8001466:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <dht11Task+0x11c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f808 	bl	8000484 <__aeabi_i2d>
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <dht11Task+0x134>)
 800147a:	f7ff f997 	bl	80007ac <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fa79 	bl	800097c <__aeabi_d2f>
 800148a:	ee07 0a90 	vmov	s15, r0
 800148e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <dht11Task+0x138>)
 8001494:	edc3 7a00 	vstr	s15, [r3]
			  temp=(float)(Temp/10.0);
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <dht11Task+0x130>)
 800149a:	ed93 7a00 	vldr	s14, [r3]
 800149e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80014a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <dht11Task+0x13c>)
 80014a8:	edc3 7a00 	vstr	s15, [r3]
			  humi=(float)(Humi/10.0);
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <dht11Task+0x12c>)
 80014ae:	ed93 7a00 	vldr	s14, [r3]
 80014b2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80014b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <dht11Task+0x140>)
 80014bc:	edc3 7a00 	vstr	s15, [r3]

			}
			HAL_Delay(100);
 80014c0:	2064      	movs	r0, #100	; 0x64
 80014c2:	f000 fda1 	bl	8002008 <HAL_Delay>
		  }
		//osDelayUntil(&StartTimedht,1000);
		osDelay(1000);
 80014c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ca:	f003 fe3a 	bl	8005142 <osDelay>
		if(DHT11_Start())
 80014ce:	e779      	b.n	80013c4 <dht11Task+0xc>
 80014d0:	2000041c 	.word	0x2000041c
 80014d4:	2000041d 	.word	0x2000041d
 80014d8:	2000041e 	.word	0x2000041e
 80014dc:	2000041f 	.word	0x2000041f
 80014e0:	20000420 	.word	0x20000420
 80014e4:	2000043c 	.word	0x2000043c
 80014e8:	20000438 	.word	0x20000438
 80014ec:	40240000 	.word	0x40240000
 80014f0:	2000042c 	.word	0x2000042c
 80014f4:	20000430 	.word	0x20000430
 80014f8:	20000434 	.word	0x20000434

080014fc <oledTask>:
	}
}
void oledTask(void const *paramerter)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	//uint32_t StartTimeoled = xTaskGetTickCount();
	while(1)
	{
		itoa(temp, strCopyTemp,10);
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <oledTask+0x80>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150e:	220a      	movs	r2, #10
 8001510:	491b      	ldr	r1, [pc, #108]	; (8001580 <oledTask+0x84>)
 8001512:	ee17 0a90 	vmov	r0, s15
 8001516:	f005 f839 	bl	800658c <itoa>
		itoa(humi, strCopyHumi, 10);
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <oledTask+0x88>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001524:	220a      	movs	r2, #10
 8001526:	4918      	ldr	r1, [pc, #96]	; (8001588 <oledTask+0x8c>)
 8001528:	ee17 0a90 	vmov	r0, s15
 800152c:	f005 f82e 	bl	800658c <itoa>
		//itoa(temp, strCopyTemp,10);
		SSD1306_GotoXY (10, 10);
 8001530:	210a      	movs	r1, #10
 8001532:	200a      	movs	r0, #10
 8001534:	f000 f9ec 	bl	8001910 <SSD1306_GotoXY>
		SSD1306_Puts (strCopyTemp, &Font_11x18, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	4914      	ldr	r1, [pc, #80]	; (800158c <oledTask+0x90>)
 800153c:	4810      	ldr	r0, [pc, #64]	; (8001580 <oledTask+0x84>)
 800153e:	f000 fa7d 	bl	8001a3c <SSD1306_Puts>
		SSD1306_Puts(" C", &Font_11x18, 1);
 8001542:	2201      	movs	r2, #1
 8001544:	4911      	ldr	r1, [pc, #68]	; (800158c <oledTask+0x90>)
 8001546:	4812      	ldr	r0, [pc, #72]	; (8001590 <oledTask+0x94>)
 8001548:	f000 fa78 	bl	8001a3c <SSD1306_Puts>
		//itoa(humi, strCopyHumi, 10);
		SSD1306_GotoXY (10, 40);
 800154c:	2128      	movs	r1, #40	; 0x28
 800154e:	200a      	movs	r0, #10
 8001550:	f000 f9de 	bl	8001910 <SSD1306_GotoXY>
		SSD1306_Puts (strCopyHumi, &Font_11x18, 1);
 8001554:	2201      	movs	r2, #1
 8001556:	490d      	ldr	r1, [pc, #52]	; (800158c <oledTask+0x90>)
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <oledTask+0x8c>)
 800155a:	f000 fa6f 	bl	8001a3c <SSD1306_Puts>
		SSD1306_Puts(" %", &Font_11x18, 1);
 800155e:	2201      	movs	r2, #1
 8001560:	490a      	ldr	r1, [pc, #40]	; (800158c <oledTask+0x90>)
 8001562:	480c      	ldr	r0, [pc, #48]	; (8001594 <oledTask+0x98>)
 8001564:	f000 fa6a 	bl	8001a3c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001568:	f000 f92c 	bl	80017c4 <SSD1306_UpdateScreen>
		HAL_Delay(100);
 800156c:	2064      	movs	r0, #100	; 0x64
 800156e:	f000 fd4b 	bl	8002008 <HAL_Delay>
		//osDelayUntil(&StartTimeoled, 1000);
		osDelay(1000);
 8001572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001576:	f003 fde4 	bl	8005142 <osDelay>
		itoa(temp, strCopyTemp,10);
 800157a:	e7c3      	b.n	8001504 <oledTask+0x8>
 800157c:	20000430 	.word	0x20000430
 8001580:	20000440 	.word	0x20000440
 8001584:	20000434 	.word	0x20000434
 8001588:	20000448 	.word	0x20000448
 800158c:	20000000 	.word	0x20000000
 8001590:	08006894 	.word	0x08006894
 8001594:	08006898 	.word	0x08006898

08001598 <transmitTask>:
	}
}
void transmitTask(void const *paramerter)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	//uint32_t StartTimeUART = xTaskGetTickCount();
	while(1)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)strCopyTemp, strlen(strCopyTemp),100);
 80015a0:	4814      	ldr	r0, [pc, #80]	; (80015f4 <transmitTask+0x5c>)
 80015a2:	f7fe fe15 	bl	80001d0 <strlen>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	2364      	movs	r3, #100	; 0x64
 80015ac:	4911      	ldr	r1, [pc, #68]	; (80015f4 <transmitTask+0x5c>)
 80015ae:	4812      	ldr	r0, [pc, #72]	; (80015f8 <transmitTask+0x60>)
 80015b0:	f003 f9a0 	bl	80048f4 <HAL_UART_Transmit>
		HAL_Delay(100);
 80015b4:	2064      	movs	r0, #100	; 0x64
 80015b6:	f000 fd27 	bl	8002008 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t *)strCopyHumi, strlen(strCopyHumi),100);
 80015ba:	4810      	ldr	r0, [pc, #64]	; (80015fc <transmitTask+0x64>)
 80015bc:	f7fe fe08 	bl	80001d0 <strlen>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	2364      	movs	r3, #100	; 0x64
 80015c6:	490d      	ldr	r1, [pc, #52]	; (80015fc <transmitTask+0x64>)
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <transmitTask+0x60>)
 80015ca:	f003 f993 	bl	80048f4 <HAL_UART_Transmit>
		HAL_Delay(100);
 80015ce:	2064      	movs	r0, #100	; 0x64
 80015d0:	f000 fd1a 	bl	8002008 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t *)strspace, strlen(strspace),100);
 80015d4:	480a      	ldr	r0, [pc, #40]	; (8001600 <transmitTask+0x68>)
 80015d6:	f7fe fdfb 	bl	80001d0 <strlen>
 80015da:	4603      	mov	r3, r0
 80015dc:	b29a      	uxth	r2, r3
 80015de:	2364      	movs	r3, #100	; 0x64
 80015e0:	4907      	ldr	r1, [pc, #28]	; (8001600 <transmitTask+0x68>)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <transmitTask+0x60>)
 80015e4:	f003 f986 	bl	80048f4 <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart2, (uint8_t *)strCopyTemp, strlen(strCopyTemp),100);
		//printf("hellu");
		//osDelayUntil(&StartTimeUART, 1000);
		osDelay(1000);
 80015e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ec:	f003 fda9 	bl	8005142 <osDelay>
		HAL_UART_Transmit(&huart2, (uint8_t *)strCopyTemp, strlen(strCopyTemp),100);
 80015f0:	e7d6      	b.n	80015a0 <transmitTask+0x8>
 80015f2:	bf00      	nop
 80015f4:	20000440 	.word	0x20000440
 80015f8:	200003c4 	.word	0x200003c4
 80015fc:	20000448 	.word	0x20000448
 8001600:	20000008 	.word	0x20000008

08001604 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //printf("Task default\n");
	  osDelay(200);
 800160c:	20c8      	movs	r0, #200	; 0xc8
 800160e:	f003 fd98 	bl	8005142 <osDelay>
 8001612:	e7fb      	b.n	800160c <StartDefaultTask+0x8>

08001614 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001624:	d101      	bne.n	800162a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001626:	f000 fccf 	bl	8001fc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001636:	b672      	cpsid	i
}
 8001638:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800163a:	e7fe      	b.n	800163a <Error_Handler+0x8>

0800163c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001642:	f000 fa29 	bl	8001a98 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001646:	f644 6320 	movw	r3, #20000	; 0x4e20
 800164a:	2201      	movs	r2, #1
 800164c:	2178      	movs	r1, #120	; 0x78
 800164e:	485b      	ldr	r0, [pc, #364]	; (80017bc <SSD1306_Init+0x180>)
 8001650:	f001 f9f0 	bl	8002a34 <HAL_I2C_IsDeviceReady>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800165a:	2300      	movs	r3, #0
 800165c:	e0a9      	b.n	80017b2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800165e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001662:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001664:	e002      	b.n	800166c <SSD1306_Init+0x30>
		p--;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3b01      	subs	r3, #1
 800166a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f9      	bne.n	8001666 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001672:	22ae      	movs	r2, #174	; 0xae
 8001674:	2100      	movs	r1, #0
 8001676:	2078      	movs	r0, #120	; 0x78
 8001678:	f000 fa8a 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800167c:	2220      	movs	r2, #32
 800167e:	2100      	movs	r1, #0
 8001680:	2078      	movs	r0, #120	; 0x78
 8001682:	f000 fa85 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001686:	2210      	movs	r2, #16
 8001688:	2100      	movs	r1, #0
 800168a:	2078      	movs	r0, #120	; 0x78
 800168c:	f000 fa80 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001690:	22b0      	movs	r2, #176	; 0xb0
 8001692:	2100      	movs	r1, #0
 8001694:	2078      	movs	r0, #120	; 0x78
 8001696:	f000 fa7b 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800169a:	22c8      	movs	r2, #200	; 0xc8
 800169c:	2100      	movs	r1, #0
 800169e:	2078      	movs	r0, #120	; 0x78
 80016a0:	f000 fa76 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2078      	movs	r0, #120	; 0x78
 80016aa:	f000 fa71 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80016ae:	2210      	movs	r2, #16
 80016b0:	2100      	movs	r1, #0
 80016b2:	2078      	movs	r0, #120	; 0x78
 80016b4:	f000 fa6c 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80016b8:	2240      	movs	r2, #64	; 0x40
 80016ba:	2100      	movs	r1, #0
 80016bc:	2078      	movs	r0, #120	; 0x78
 80016be:	f000 fa67 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80016c2:	2281      	movs	r2, #129	; 0x81
 80016c4:	2100      	movs	r1, #0
 80016c6:	2078      	movs	r0, #120	; 0x78
 80016c8:	f000 fa62 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80016cc:	22ff      	movs	r2, #255	; 0xff
 80016ce:	2100      	movs	r1, #0
 80016d0:	2078      	movs	r0, #120	; 0x78
 80016d2:	f000 fa5d 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80016d6:	22a1      	movs	r2, #161	; 0xa1
 80016d8:	2100      	movs	r1, #0
 80016da:	2078      	movs	r0, #120	; 0x78
 80016dc:	f000 fa58 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80016e0:	22a6      	movs	r2, #166	; 0xa6
 80016e2:	2100      	movs	r1, #0
 80016e4:	2078      	movs	r0, #120	; 0x78
 80016e6:	f000 fa53 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80016ea:	22a8      	movs	r2, #168	; 0xa8
 80016ec:	2100      	movs	r1, #0
 80016ee:	2078      	movs	r0, #120	; 0x78
 80016f0:	f000 fa4e 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80016f4:	223f      	movs	r2, #63	; 0x3f
 80016f6:	2100      	movs	r1, #0
 80016f8:	2078      	movs	r0, #120	; 0x78
 80016fa:	f000 fa49 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80016fe:	22a4      	movs	r2, #164	; 0xa4
 8001700:	2100      	movs	r1, #0
 8001702:	2078      	movs	r0, #120	; 0x78
 8001704:	f000 fa44 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001708:	22d3      	movs	r2, #211	; 0xd3
 800170a:	2100      	movs	r1, #0
 800170c:	2078      	movs	r0, #120	; 0x78
 800170e:	f000 fa3f 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	2078      	movs	r0, #120	; 0x78
 8001718:	f000 fa3a 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800171c:	22d5      	movs	r2, #213	; 0xd5
 800171e:	2100      	movs	r1, #0
 8001720:	2078      	movs	r0, #120	; 0x78
 8001722:	f000 fa35 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001726:	22f0      	movs	r2, #240	; 0xf0
 8001728:	2100      	movs	r1, #0
 800172a:	2078      	movs	r0, #120	; 0x78
 800172c:	f000 fa30 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001730:	22d9      	movs	r2, #217	; 0xd9
 8001732:	2100      	movs	r1, #0
 8001734:	2078      	movs	r0, #120	; 0x78
 8001736:	f000 fa2b 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800173a:	2222      	movs	r2, #34	; 0x22
 800173c:	2100      	movs	r1, #0
 800173e:	2078      	movs	r0, #120	; 0x78
 8001740:	f000 fa26 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001744:	22da      	movs	r2, #218	; 0xda
 8001746:	2100      	movs	r1, #0
 8001748:	2078      	movs	r0, #120	; 0x78
 800174a:	f000 fa21 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800174e:	2212      	movs	r2, #18
 8001750:	2100      	movs	r1, #0
 8001752:	2078      	movs	r0, #120	; 0x78
 8001754:	f000 fa1c 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001758:	22db      	movs	r2, #219	; 0xdb
 800175a:	2100      	movs	r1, #0
 800175c:	2078      	movs	r0, #120	; 0x78
 800175e:	f000 fa17 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001762:	2220      	movs	r2, #32
 8001764:	2100      	movs	r1, #0
 8001766:	2078      	movs	r0, #120	; 0x78
 8001768:	f000 fa12 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800176c:	228d      	movs	r2, #141	; 0x8d
 800176e:	2100      	movs	r1, #0
 8001770:	2078      	movs	r0, #120	; 0x78
 8001772:	f000 fa0d 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001776:	2214      	movs	r2, #20
 8001778:	2100      	movs	r1, #0
 800177a:	2078      	movs	r0, #120	; 0x78
 800177c:	f000 fa08 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001780:	22af      	movs	r2, #175	; 0xaf
 8001782:	2100      	movs	r1, #0
 8001784:	2078      	movs	r0, #120	; 0x78
 8001786:	f000 fa03 	bl	8001b90 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800178a:	222e      	movs	r2, #46	; 0x2e
 800178c:	2100      	movs	r1, #0
 800178e:	2078      	movs	r0, #120	; 0x78
 8001790:	f000 f9fe 	bl	8001b90 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001794:	2000      	movs	r0, #0
 8001796:	f000 f843 	bl	8001820 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800179a:	f000 f813 	bl	80017c4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <SSD1306_Init+0x184>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <SSD1306_Init+0x184>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <SSD1306_Init+0x184>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80017b0:	2301      	movs	r3, #1
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000328 	.word	0x20000328
 80017c0:	20000850 	.word	0x20000850

080017c4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80017ca:	2300      	movs	r3, #0
 80017cc:	71fb      	strb	r3, [r7, #7]
 80017ce:	e01d      	b.n	800180c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	3b50      	subs	r3, #80	; 0x50
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	2100      	movs	r1, #0
 80017da:	2078      	movs	r0, #120	; 0x78
 80017dc:	f000 f9d8 	bl	8001b90 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	2078      	movs	r0, #120	; 0x78
 80017e6:	f000 f9d3 	bl	8001b90 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80017ea:	2210      	movs	r2, #16
 80017ec:	2100      	movs	r1, #0
 80017ee:	2078      	movs	r0, #120	; 0x78
 80017f0:	f000 f9ce 	bl	8001b90 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	01db      	lsls	r3, r3, #7
 80017f8:	4a08      	ldr	r2, [pc, #32]	; (800181c <SSD1306_UpdateScreen+0x58>)
 80017fa:	441a      	add	r2, r3
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	2140      	movs	r1, #64	; 0x40
 8001800:	2078      	movs	r0, #120	; 0x78
 8001802:	f000 f95f 	bl	8001ac4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	3301      	adds	r3, #1
 800180a:	71fb      	strb	r3, [r7, #7]
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	2b07      	cmp	r3, #7
 8001810:	d9de      	bls.n	80017d0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000450 	.word	0x20000450

08001820 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <SSD1306_Fill+0x14>
 8001830:	2300      	movs	r3, #0
 8001832:	e000      	b.n	8001836 <SSD1306_Fill+0x16>
 8001834:	23ff      	movs	r3, #255	; 0xff
 8001836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800183a:	4619      	mov	r1, r3
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <SSD1306_Fill+0x2c>)
 800183e:	f004 fee9 	bl	8006614 <memset>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000450 	.word	0x20000450

08001850 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
 800185a:	460b      	mov	r3, r1
 800185c:	80bb      	strh	r3, [r7, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	70fb      	strb	r3, [r7, #3]
	if (
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	2b7f      	cmp	r3, #127	; 0x7f
 8001866:	d848      	bhi.n	80018fa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001868:	88bb      	ldrh	r3, [r7, #4]
 800186a:	2b3f      	cmp	r3, #63	; 0x3f
 800186c:	d845      	bhi.n	80018fa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <SSD1306_DrawPixel+0xb8>)
 8001870:	791b      	ldrb	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d006      	beq.n	8001884 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d11a      	bne.n	80018c0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800188a:	88fa      	ldrh	r2, [r7, #6]
 800188c:	88bb      	ldrh	r3, [r7, #4]
 800188e:	08db      	lsrs	r3, r3, #3
 8001890:	b298      	uxth	r0, r3
 8001892:	4603      	mov	r3, r0
 8001894:	01db      	lsls	r3, r3, #7
 8001896:	4413      	add	r3, r2
 8001898:	4a1c      	ldr	r2, [pc, #112]	; (800190c <SSD1306_DrawPixel+0xbc>)
 800189a:	5cd3      	ldrb	r3, [r2, r3]
 800189c:	b25a      	sxtb	r2, r3
 800189e:	88bb      	ldrh	r3, [r7, #4]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	2101      	movs	r1, #1
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	b259      	sxtb	r1, r3
 80018b0:	88fa      	ldrh	r2, [r7, #6]
 80018b2:	4603      	mov	r3, r0
 80018b4:	01db      	lsls	r3, r3, #7
 80018b6:	4413      	add	r3, r2
 80018b8:	b2c9      	uxtb	r1, r1
 80018ba:	4a14      	ldr	r2, [pc, #80]	; (800190c <SSD1306_DrawPixel+0xbc>)
 80018bc:	54d1      	strb	r1, [r2, r3]
 80018be:	e01d      	b.n	80018fc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018c0:	88fa      	ldrh	r2, [r7, #6]
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	08db      	lsrs	r3, r3, #3
 80018c6:	b298      	uxth	r0, r3
 80018c8:	4603      	mov	r3, r0
 80018ca:	01db      	lsls	r3, r3, #7
 80018cc:	4413      	add	r3, r2
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <SSD1306_DrawPixel+0xbc>)
 80018d0:	5cd3      	ldrb	r3, [r2, r3]
 80018d2:	b25a      	sxtb	r2, r3
 80018d4:	88bb      	ldrh	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	2101      	movs	r1, #1
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	4013      	ands	r3, r2
 80018e8:	b259      	sxtb	r1, r3
 80018ea:	88fa      	ldrh	r2, [r7, #6]
 80018ec:	4603      	mov	r3, r0
 80018ee:	01db      	lsls	r3, r3, #7
 80018f0:	4413      	add	r3, r2
 80018f2:	b2c9      	uxtb	r1, r1
 80018f4:	4a05      	ldr	r2, [pc, #20]	; (800190c <SSD1306_DrawPixel+0xbc>)
 80018f6:	54d1      	strb	r1, [r2, r3]
 80018f8:	e000      	b.n	80018fc <SSD1306_DrawPixel+0xac>
		return;
 80018fa:	bf00      	nop
	}
}
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000850 	.word	0x20000850
 800190c:	20000450 	.word	0x20000450

08001910 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	460a      	mov	r2, r1
 800191a:	80fb      	strh	r3, [r7, #6]
 800191c:	4613      	mov	r3, r2
 800191e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001920:	4a05      	ldr	r2, [pc, #20]	; (8001938 <SSD1306_GotoXY+0x28>)
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <SSD1306_GotoXY+0x28>)
 8001928:	88bb      	ldrh	r3, [r7, #4]
 800192a:	8053      	strh	r3, [r2, #2]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	20000850 	.word	0x20000850

0800193c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
 8001948:	4613      	mov	r3, r2
 800194a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800194c:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <SSD1306_Putc+0xfc>)
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
	if (
 8001958:	2b7f      	cmp	r3, #127	; 0x7f
 800195a:	dc07      	bgt.n	800196c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800195c:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <SSD1306_Putc+0xfc>)
 800195e:	885b      	ldrh	r3, [r3, #2]
 8001960:	461a      	mov	r2, r3
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	785b      	ldrb	r3, [r3, #1]
 8001966:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001968:	2b3f      	cmp	r3, #63	; 0x3f
 800196a:	dd01      	ble.n	8001970 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800196c:	2300      	movs	r3, #0
 800196e:	e05e      	b.n	8001a2e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	e04b      	b.n	8001a0e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	3b20      	subs	r3, #32
 800197e:	6839      	ldr	r1, [r7, #0]
 8001980:	7849      	ldrb	r1, [r1, #1]
 8001982:	fb01 f303 	mul.w	r3, r1, r3
 8001986:	4619      	mov	r1, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	440b      	add	r3, r1
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	e030      	b.n	80019fc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d010      	beq.n	80019cc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80019aa:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <SSD1306_Putc+0xfc>)
 80019ac:	881a      	ldrh	r2, [r3, #0]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	b298      	uxth	r0, r3
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <SSD1306_Putc+0xfc>)
 80019b8:	885a      	ldrh	r2, [r3, #2]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4413      	add	r3, r2
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	79ba      	ldrb	r2, [r7, #6]
 80019c4:	4619      	mov	r1, r3
 80019c6:	f7ff ff43 	bl	8001850 <SSD1306_DrawPixel>
 80019ca:	e014      	b.n	80019f6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <SSD1306_Putc+0xfc>)
 80019ce:	881a      	ldrh	r2, [r3, #0]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	b298      	uxth	r0, r3
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <SSD1306_Putc+0xfc>)
 80019da:	885a      	ldrh	r2, [r3, #2]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	b299      	uxth	r1, r3
 80019e4:	79bb      	ldrb	r3, [r7, #6]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bf0c      	ite	eq
 80019ea:	2301      	moveq	r3, #1
 80019ec:	2300      	movne	r3, #0
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	f7ff ff2d 	bl	8001850 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	3301      	adds	r3, #1
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d3c8      	bcc.n	800199a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	785b      	ldrb	r3, [r3, #1]
 8001a12:	461a      	mov	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d3ad      	bcc.n	8001976 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <SSD1306_Putc+0xfc>)
 8001a1c:	881a      	ldrh	r2, [r3, #0]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <SSD1306_Putc+0xfc>)
 8001a2a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000850 	.word	0x20000850

08001a3c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	4613      	mov	r3, r2
 8001a48:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001a4a:	e012      	b.n	8001a72 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	79fa      	ldrb	r2, [r7, #7]
 8001a52:	68b9      	ldr	r1, [r7, #8]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff71 	bl	800193c <SSD1306_Putc>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d002      	beq.n	8001a6c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	e008      	b.n	8001a7e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1e8      	bne.n	8001a4c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fec8 	bl	8001820 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001a90:	f7ff fe98 	bl	80017c4 <SSD1306_UpdateScreen>
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <ssd1306_I2C_Init+0x28>)
 8001aa0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001aa2:	e002      	b.n	8001aaa <ssd1306_I2C_Init+0x12>
		p--;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f9      	bne.n	8001aa4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	0003d090 	.word	0x0003d090

08001ac4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b0c7      	sub	sp, #284	; 0x11c
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	4604      	mov	r4, r0
 8001acc:	4608      	mov	r0, r1
 8001ace:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001ad2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001ad6:	600a      	str	r2, [r1, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ade:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001ae2:	4622      	mov	r2, r4
 8001ae4:	701a      	strb	r2, [r3, #0]
 8001ae6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001aea:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001aee:	4602      	mov	r2, r0
 8001af0:	701a      	strb	r2, [r3, #0]
 8001af2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001af6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001afa:	460a      	mov	r2, r1
 8001afc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001afe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b06:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b0a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001b0e:	7812      	ldrb	r2, [r2, #0]
 8001b10:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b18:	e015      	b.n	8001b46 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001b1a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b1e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b22:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	441a      	add	r2, r3
 8001b2a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b2e:	3301      	adds	r3, #1
 8001b30:	7811      	ldrb	r1, [r2, #0]
 8001b32:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b36:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001b3a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001b3c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b40:	3301      	adds	r3, #1
 8001b42:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b46:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b50:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001b54:	8812      	ldrh	r2, [r2, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d8df      	bhi.n	8001b1a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001b5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b5e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b299      	uxth	r1, r3
 8001b66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	f107 020c 	add.w	r2, r7, #12
 8001b78:	200a      	movs	r0, #10
 8001b7a:	9000      	str	r0, [sp, #0]
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <ssd1306_I2C_WriteMulti+0xc8>)
 8001b7e:	f000 fe5b 	bl	8002838 <HAL_I2C_Master_Transmit>
}
 8001b82:	bf00      	nop
 8001b84:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd90      	pop	{r4, r7, pc}
 8001b8c:	20000328 	.word	0x20000328

08001b90 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	71bb      	strb	r3, [r7, #6]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001ba2:	79bb      	ldrb	r3, [r7, #6]
 8001ba4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001ba6:	797b      	ldrb	r3, [r7, #5]
 8001ba8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	b299      	uxth	r1, r3
 8001bae:	f107 020c 	add.w	r2, r7, #12
 8001bb2:	230a      	movs	r3, #10
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	4803      	ldr	r0, [pc, #12]	; (8001bc8 <ssd1306_I2C_Write+0x38>)
 8001bba:	f000 fe3d 	bl	8002838 <HAL_I2C_Master_Transmit>
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000328 	.word	0x20000328

08001bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_MspInit+0x54>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <HAL_MspInit+0x54>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_MspInit+0x54>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_MspInit+0x54>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_MspInit+0x54>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_MspInit+0x54>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	210f      	movs	r1, #15
 8001c0e:	f06f 0001 	mvn.w	r0, #1
 8001c12:	f000 fad5 	bl	80021c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800

08001c24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <HAL_I2C_MspInit+0x84>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d12b      	bne.n	8001c9e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_I2C_MspInit+0x88>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a17      	ldr	r2, [pc, #92]	; (8001cac <HAL_I2C_MspInit+0x88>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_I2C_MspInit+0x88>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c62:	23c0      	movs	r3, #192	; 0xc0
 8001c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c66:	2312      	movs	r3, #18
 8001c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c72:	2304      	movs	r3, #4
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <HAL_I2C_MspInit+0x8c>)
 8001c7e:	f000 fac9 	bl	8002214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_I2C_MspInit+0x88>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <HAL_I2C_MspInit+0x88>)
 8001c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c90:	6413      	str	r3, [r2, #64]	; 0x40
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_I2C_MspInit+0x88>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c9e:	bf00      	nop
 8001ca0:	3728      	adds	r7, #40	; 0x28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40005400 	.word	0x40005400
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020400 	.word	0x40020400

08001cb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_TIM_Base_MspInit+0x84>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d12c      	bne.n	8001d30 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_TIM_Base_MspInit+0x88>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <HAL_TIM_Base_MspInit+0x88>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_TIM_Base_MspInit+0x88>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_TIM_Base_MspInit+0x88>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <HAL_TIM_Base_MspInit+0x88>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_TIM_Base_MspInit+0x88>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4805      	ldr	r0, [pc, #20]	; (8001d40 <HAL_TIM_Base_MspInit+0x8c>)
 8001d2c:	f000 fa72 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020000 	.word	0x40020000

08001d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_UART_MspInit+0x84>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d12b      	bne.n	8001dbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_UART_MspInit+0x88>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d9e:	230c      	movs	r3, #12
 8001da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dae:	2307      	movs	r3, #7
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <HAL_UART_MspInit+0x8c>)
 8001dba:	f000 fa2b 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dbe:	bf00      	nop
 8001dc0:	3728      	adds	r7, #40	; 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40004400 	.word	0x40004400
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08e      	sub	sp, #56	; 0x38
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <HAL_InitTick+0xe8>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	4a33      	ldr	r2, [pc, #204]	; (8001ebc <HAL_InitTick+0xe8>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6413      	str	r3, [r2, #64]	; 0x40
 8001df4:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <HAL_InitTick+0xe8>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e00:	f107 0210 	add.w	r2, r7, #16
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 fdf4 	bl	80039f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d103      	bne.n	8001e22 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e1a:	f001 fdc5 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 8001e1e:	6378      	str	r0, [r7, #52]	; 0x34
 8001e20:	e004      	b.n	8001e2c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e22:	f001 fdc1 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 8001e26:	4603      	mov	r3, r0
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2e:	4a24      	ldr	r2, [pc, #144]	; (8001ec0 <HAL_InitTick+0xec>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	0c9b      	lsrs	r3, r3, #18
 8001e36:	3b01      	subs	r3, #1
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001e3a:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <HAL_InitTick+0xf0>)
 8001e3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <HAL_InitTick+0xf0>)
 8001e44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e48:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001e4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <HAL_InitTick+0xf0>)
 8001e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001e50:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <HAL_InitTick+0xf0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_InitTick+0xf0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_InitTick+0xf0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001e62:	4818      	ldr	r0, [pc, #96]	; (8001ec4 <HAL_InitTick+0xf0>)
 8001e64:	f001 fdfa 	bl	8003a5c <HAL_TIM_Base_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001e6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d11b      	bne.n	8001eae <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001e76:	4813      	ldr	r0, [pc, #76]	; (8001ec4 <HAL_InitTick+0xf0>)
 8001e78:	f001 fea8 	bl	8003bcc <HAL_TIM_Base_Start_IT>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001e82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d111      	bne.n	8001eae <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e8a:	201c      	movs	r0, #28
 8001e8c:	f000 f9b4 	bl	80021f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b0f      	cmp	r3, #15
 8001e94:	d808      	bhi.n	8001ea8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001e96:	2200      	movs	r2, #0
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	201c      	movs	r0, #28
 8001e9c:	f000 f990 	bl	80021c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ea0:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_InitTick+0xf4>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e002      	b.n	8001eae <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001eae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3738      	adds	r7, #56	; 0x38
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	431bde83 	.word	0x431bde83
 8001ec4:	20000858 	.word	0x20000858
 8001ec8:	20000010 	.word	0x20000010

08001ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <NMI_Handler+0x4>

08001ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <HardFault_Handler+0x4>

08001ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <MemManage_Handler+0x4>

08001ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <BusFault_Handler+0x4>

08001ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <UsageFault_Handler+0x4>

08001eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <TIM2_IRQHandler+0x10>)
 8001efe:	f001 ff2e 	bl	8003d5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000858 	.word	0x20000858

08001f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <SystemInit+0x20>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <SystemInit+0x20>)
 8001f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f34:	f7ff ffea 	bl	8001f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f3a:	490d      	ldr	r1, [pc, #52]	; (8001f70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f40:	e002      	b.n	8001f48 <LoopCopyDataInit>

08001f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f46:	3304      	adds	r3, #4

08001f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f4c:	d3f9      	bcc.n	8001f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f50:	4c0a      	ldr	r4, [pc, #40]	; (8001f7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f54:	e001      	b.n	8001f5a <LoopFillZerobss>

08001f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f58:	3204      	adds	r2, #4

08001f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f5c:	d3fb      	bcc.n	8001f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f5e:	f004 fbb7 	bl	80066d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f62:	f7ff f801 	bl	8000f68 <main>
  bx  lr    
 8001f66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001f74:	08007650 	.word	0x08007650
  ldr r2, =_sbss
 8001f78:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001f7c:	20004738 	.word	0x20004738

08001f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC_IRQHandler>
	...

08001f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <HAL_Init+0x40>)
 8001f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <HAL_Init+0x40>)
 8001f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_Init+0x40>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <HAL_Init+0x40>)
 8001fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fac:	2003      	movs	r0, #3
 8001fae:	f000 f8fc 	bl	80021aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb2:	200f      	movs	r0, #15
 8001fb4:	f7ff ff0e 	bl	8001dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb8:	f7ff fe08 	bl	8001bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023c00 	.word	0x40023c00

08001fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_IncTick+0x24>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <HAL_IncTick+0x24>)
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000014 	.word	0x20000014
 8001fec:	200008a0 	.word	0x200008a0

08001ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <HAL_GetTick+0x14>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	200008a0 	.word	0x200008a0

08002008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff ffee 	bl	8001ff0 <HAL_GetTick>
 8002014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d005      	beq.n	800202e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_Delay+0x44>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800202e:	bf00      	nop
 8002030:	f7ff ffde 	bl	8001ff0 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d8f7      	bhi.n	8002030 <HAL_Delay+0x28>
  {
  }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000014 	.word	0x20000014

08002050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800207c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002082:	4a04      	ldr	r2, [pc, #16]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	60d3      	str	r3, [r2, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <__NVIC_GetPriorityGrouping+0x18>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	f003 0307 	and.w	r3, r3, #7
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db0b      	blt.n	80020de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	f003 021f 	and.w	r2, r3, #31
 80020cc:	4907      	ldr	r1, [pc, #28]	; (80020ec <__NVIC_EnableIRQ+0x38>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	2001      	movs	r0, #1
 80020d6:	fa00 f202 	lsl.w	r2, r0, r2
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000e100 	.word	0xe000e100

080020f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	2b00      	cmp	r3, #0
 8002102:	db0a      	blt.n	800211a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	490c      	ldr	r1, [pc, #48]	; (800213c <__NVIC_SetPriority+0x4c>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	0112      	lsls	r2, r2, #4
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	440b      	add	r3, r1
 8002114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002118:	e00a      	b.n	8002130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4908      	ldr	r1, [pc, #32]	; (8002140 <__NVIC_SetPriority+0x50>)
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	3b04      	subs	r3, #4
 8002128:	0112      	lsls	r2, r2, #4
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	440b      	add	r3, r1
 800212e:	761a      	strb	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000e100 	.word	0xe000e100
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f1c3 0307 	rsb	r3, r3, #7
 800215e:	2b04      	cmp	r3, #4
 8002160:	bf28      	it	cs
 8002162:	2304      	movcs	r3, #4
 8002164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3304      	adds	r3, #4
 800216a:	2b06      	cmp	r3, #6
 800216c:	d902      	bls.n	8002174 <NVIC_EncodePriority+0x30>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3b03      	subs	r3, #3
 8002172:	e000      	b.n	8002176 <NVIC_EncodePriority+0x32>
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	43d9      	mvns	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	4313      	orrs	r3, r2
         );
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ff4c 	bl	8002050 <__NVIC_SetPriorityGrouping>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d2:	f7ff ff61 	bl	8002098 <__NVIC_GetPriorityGrouping>
 80021d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	6978      	ldr	r0, [r7, #20]
 80021de:	f7ff ffb1 	bl	8002144 <NVIC_EncodePriority>
 80021e2:	4602      	mov	r2, r0
 80021e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff80 	bl	80020f0 <__NVIC_SetPriority>
}
 80021f0:	bf00      	nop
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff54 	bl	80020b4 <__NVIC_EnableIRQ>
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	e16b      	b.n	8002508 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002230:	2201      	movs	r2, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	f040 815a 	bne.w	8002502 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d005      	beq.n	8002266 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002262:	2b02      	cmp	r3, #2
 8002264:	d130      	bne.n	80022c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 0201 	and.w	r2, r3, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d017      	beq.n	8002304 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d123      	bne.n	8002358 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	08da      	lsrs	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3208      	adds	r2, #8
 8002318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	220f      	movs	r2, #15
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3208      	adds	r2, #8
 8002352:	69b9      	ldr	r1, [r7, #24]
 8002354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0203 	and.w	r2, r3, #3
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80b4 	beq.w	8002502 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b60      	ldr	r3, [pc, #384]	; (8002520 <HAL_GPIO_Init+0x30c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a5f      	ldr	r2, [pc, #380]	; (8002520 <HAL_GPIO_Init+0x30c>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b5d      	ldr	r3, [pc, #372]	; (8002520 <HAL_GPIO_Init+0x30c>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023b6:	4a5b      	ldr	r2, [pc, #364]	; (8002524 <HAL_GPIO_Init+0x310>)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3302      	adds	r3, #2
 80023be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a52      	ldr	r2, [pc, #328]	; (8002528 <HAL_GPIO_Init+0x314>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d02b      	beq.n	800243a <HAL_GPIO_Init+0x226>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a51      	ldr	r2, [pc, #324]	; (800252c <HAL_GPIO_Init+0x318>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d025      	beq.n	8002436 <HAL_GPIO_Init+0x222>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a50      	ldr	r2, [pc, #320]	; (8002530 <HAL_GPIO_Init+0x31c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01f      	beq.n	8002432 <HAL_GPIO_Init+0x21e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4f      	ldr	r2, [pc, #316]	; (8002534 <HAL_GPIO_Init+0x320>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d019      	beq.n	800242e <HAL_GPIO_Init+0x21a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4e      	ldr	r2, [pc, #312]	; (8002538 <HAL_GPIO_Init+0x324>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_GPIO_Init+0x216>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4d      	ldr	r2, [pc, #308]	; (800253c <HAL_GPIO_Init+0x328>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00d      	beq.n	8002426 <HAL_GPIO_Init+0x212>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4c      	ldr	r2, [pc, #304]	; (8002540 <HAL_GPIO_Init+0x32c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d007      	beq.n	8002422 <HAL_GPIO_Init+0x20e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4b      	ldr	r2, [pc, #300]	; (8002544 <HAL_GPIO_Init+0x330>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_GPIO_Init+0x20a>
 800241a:	2307      	movs	r3, #7
 800241c:	e00e      	b.n	800243c <HAL_GPIO_Init+0x228>
 800241e:	2308      	movs	r3, #8
 8002420:	e00c      	b.n	800243c <HAL_GPIO_Init+0x228>
 8002422:	2306      	movs	r3, #6
 8002424:	e00a      	b.n	800243c <HAL_GPIO_Init+0x228>
 8002426:	2305      	movs	r3, #5
 8002428:	e008      	b.n	800243c <HAL_GPIO_Init+0x228>
 800242a:	2304      	movs	r3, #4
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x228>
 800242e:	2303      	movs	r3, #3
 8002430:	e004      	b.n	800243c <HAL_GPIO_Init+0x228>
 8002432:	2302      	movs	r3, #2
 8002434:	e002      	b.n	800243c <HAL_GPIO_Init+0x228>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_GPIO_Init+0x228>
 800243a:	2300      	movs	r3, #0
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f002 0203 	and.w	r2, r2, #3
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	4093      	lsls	r3, r2
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800244c:	4935      	ldr	r1, [pc, #212]	; (8002524 <HAL_GPIO_Init+0x310>)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245a:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_GPIO_Init+0x334>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800247e:	4a32      	ldr	r2, [pc, #200]	; (8002548 <HAL_GPIO_Init+0x334>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_GPIO_Init+0x334>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a8:	4a27      	ldr	r2, [pc, #156]	; (8002548 <HAL_GPIO_Init+0x334>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_GPIO_Init+0x334>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d2:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <HAL_GPIO_Init+0x334>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d8:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <HAL_GPIO_Init+0x334>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024fc:	4a12      	ldr	r2, [pc, #72]	; (8002548 <HAL_GPIO_Init+0x334>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3301      	adds	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b0f      	cmp	r3, #15
 800250c:	f67f ae90 	bls.w	8002230 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	40013800 	.word	0x40013800
 8002528:	40020000 	.word	0x40020000
 800252c:	40020400 	.word	0x40020400
 8002530:	40020800 	.word	0x40020800
 8002534:	40020c00 	.word	0x40020c00
 8002538:	40021000 	.word	0x40021000
 800253c:	40021400 	.word	0x40021400
 8002540:	40021800 	.word	0x40021800
 8002544:	40021c00 	.word	0x40021c00
 8002548:	40013c00 	.word	0x40013c00

0800254c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	887b      	ldrh	r3, [r7, #2]
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	e001      	b.n	800256e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800256e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
 8002588:	4613      	mov	r3, r2
 800258a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002598:	e003      	b.n	80025a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800259a:	887b      	ldrh	r3, [r7, #2]
 800259c:	041a      	lsls	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	619a      	str	r2, [r3, #24]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e12b      	b.n	800281a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff fb24 	bl	8001c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	; 0x24
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002602:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002612:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002614:	f001 f9c8 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 8002618:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4a81      	ldr	r2, [pc, #516]	; (8002824 <HAL_I2C_Init+0x274>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d807      	bhi.n	8002634 <HAL_I2C_Init+0x84>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4a80      	ldr	r2, [pc, #512]	; (8002828 <HAL_I2C_Init+0x278>)
 8002628:	4293      	cmp	r3, r2
 800262a:	bf94      	ite	ls
 800262c:	2301      	movls	r3, #1
 800262e:	2300      	movhi	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	e006      	b.n	8002642 <HAL_I2C_Init+0x92>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a7d      	ldr	r2, [pc, #500]	; (800282c <HAL_I2C_Init+0x27c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	bf94      	ite	ls
 800263c:	2301      	movls	r3, #1
 800263e:	2300      	movhi	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0e7      	b.n	800281a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4a78      	ldr	r2, [pc, #480]	; (8002830 <HAL_I2C_Init+0x280>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0c9b      	lsrs	r3, r3, #18
 8002654:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	430a      	orrs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a6a      	ldr	r2, [pc, #424]	; (8002824 <HAL_I2C_Init+0x274>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d802      	bhi.n	8002684 <HAL_I2C_Init+0xd4>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3301      	adds	r3, #1
 8002682:	e009      	b.n	8002698 <HAL_I2C_Init+0xe8>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	4a69      	ldr	r2, [pc, #420]	; (8002834 <HAL_I2C_Init+0x284>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	099b      	lsrs	r3, r3, #6
 8002696:	3301      	adds	r3, #1
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	430b      	orrs	r3, r1
 800269e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	495c      	ldr	r1, [pc, #368]	; (8002824 <HAL_I2C_Init+0x274>)
 80026b4:	428b      	cmp	r3, r1
 80026b6:	d819      	bhi.n	80026ec <HAL_I2C_Init+0x13c>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1e59      	subs	r1, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c6:	1c59      	adds	r1, r3, #1
 80026c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026cc:	400b      	ands	r3, r1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_I2C_Init+0x138>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1e59      	subs	r1, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e0:	3301      	adds	r3, #1
 80026e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e6:	e051      	b.n	800278c <HAL_I2C_Init+0x1dc>
 80026e8:	2304      	movs	r3, #4
 80026ea:	e04f      	b.n	800278c <HAL_I2C_Init+0x1dc>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d111      	bne.n	8002718 <HAL_I2C_Init+0x168>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1e58      	subs	r0, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	440b      	add	r3, r1
 8002702:	fbb0 f3f3 	udiv	r3, r0, r3
 8002706:	3301      	adds	r3, #1
 8002708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	e012      	b.n	800273e <HAL_I2C_Init+0x18e>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1e58      	subs	r0, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	0099      	lsls	r1, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	fbb0 f3f3 	udiv	r3, r0, r3
 800272e:	3301      	adds	r3, #1
 8002730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Init+0x196>
 8002742:	2301      	movs	r3, #1
 8002744:	e022      	b.n	800278c <HAL_I2C_Init+0x1dc>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10e      	bne.n	800276c <HAL_I2C_Init+0x1bc>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1e58      	subs	r0, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	460b      	mov	r3, r1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	440b      	add	r3, r1
 800275c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002760:	3301      	adds	r3, #1
 8002762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800276a:	e00f      	b.n	800278c <HAL_I2C_Init+0x1dc>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1e58      	subs	r0, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	0099      	lsls	r1, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002782:	3301      	adds	r3, #1
 8002784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	6809      	ldr	r1, [r1, #0]
 8002790:	4313      	orrs	r3, r2
 8002792:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6911      	ldr	r1, [r2, #16]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68d2      	ldr	r2, [r2, #12]
 80027c6:	4311      	orrs	r1, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	000186a0 	.word	0x000186a0
 8002828:	001e847f 	.word	0x001e847f
 800282c:	003d08ff 	.word	0x003d08ff
 8002830:	431bde83 	.word	0x431bde83
 8002834:	10624dd3 	.word	0x10624dd3

08002838 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	461a      	mov	r2, r3
 8002844:	460b      	mov	r3, r1
 8002846:	817b      	strh	r3, [r7, #10]
 8002848:	4613      	mov	r3, r2
 800284a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800284c:	f7ff fbd0 	bl	8001ff0 <HAL_GetTick>
 8002850:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	f040 80e0 	bne.w	8002a20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2319      	movs	r3, #25
 8002866:	2201      	movs	r2, #1
 8002868:	4970      	ldr	r1, [pc, #448]	; (8002a2c <HAL_I2C_Master_Transmit+0x1f4>)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fa92 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002876:	2302      	movs	r3, #2
 8002878:	e0d3      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_I2C_Master_Transmit+0x50>
 8002884:	2302      	movs	r3, #2
 8002886:	e0cc      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d007      	beq.n	80028ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2221      	movs	r2, #33	; 0x21
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2210      	movs	r2, #16
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	893a      	ldrh	r2, [r7, #8]
 80028de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a50      	ldr	r2, [pc, #320]	; (8002a30 <HAL_I2C_Master_Transmit+0x1f8>)
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028f0:	8979      	ldrh	r1, [r7, #10]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	6a3a      	ldr	r2, [r7, #32]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f9ca 	bl	8002c90 <I2C_MasterRequestWrite>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e08d      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800291c:	e066      	b.n	80029ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	6a39      	ldr	r1, [r7, #32]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fb50 	bl	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00d      	beq.n	800294a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	2b04      	cmp	r3, #4
 8002934:	d107      	bne.n	8002946 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002944:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e06b      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b04      	cmp	r3, #4
 8002986:	d11b      	bne.n	80029c0 <HAL_I2C_Master_Transmit+0x188>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	d017      	beq.n	80029c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	781a      	ldrb	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	6a39      	ldr	r1, [r7, #32]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fb47 	bl	8003058 <I2C_WaitOnBTFFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00d      	beq.n	80029ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d107      	bne.n	80029e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e01a      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d194      	bne.n	800291e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e000      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
  }
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	00100002 	.word	0x00100002
 8002a30:	ffff0000 	.word	0xffff0000

08002a34 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	460b      	mov	r3, r1
 8002a42:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7ff fad4 	bl	8001ff0 <HAL_GetTick>
 8002a48:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	f040 8111 	bne.w	8002c7e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2319      	movs	r3, #25
 8002a62:	2201      	movs	r2, #1
 8002a64:	4988      	ldr	r1, [pc, #544]	; (8002c88 <HAL_I2C_IsDeviceReady+0x254>)
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f994 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002a72:	2302      	movs	r3, #2
 8002a74:	e104      	b.n	8002c80 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_I2C_IsDeviceReady+0x50>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0fd      	b.n	8002c80 <HAL_I2C_IsDeviceReady+0x24c>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d007      	beq.n	8002aaa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0201 	orr.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2224      	movs	r2, #36	; 0x24
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4a70      	ldr	r2, [pc, #448]	; (8002c8c <HAL_I2C_IsDeviceReady+0x258>)
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002adc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f952 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00d      	beq.n	8002b12 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b04:	d103      	bne.n	8002b0e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e0b6      	b.n	8002c80 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b12:	897b      	ldrh	r3, [r7, #10]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b20:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b22:	f7ff fa65 	bl	8001ff0 <HAL_GetTick>
 8002b26:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	bf0c      	ite	eq
 8002b36:	2301      	moveq	r3, #1
 8002b38:	2300      	movne	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4c:	bf0c      	ite	eq
 8002b4e:	2301      	moveq	r3, #1
 8002b50:	2300      	movne	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b56:	e025      	b.n	8002ba4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b58:	f7ff fa4a 	bl	8001ff0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d302      	bcc.n	8002b6e <HAL_I2C_IsDeviceReady+0x13a>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	22a0      	movs	r2, #160	; 0xa0
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2ba0      	cmp	r3, #160	; 0xa0
 8002bae:	d005      	beq.n	8002bbc <HAL_I2C_IsDeviceReady+0x188>
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <HAL_I2C_IsDeviceReady+0x188>
 8002bb6:	7dbb      	ldrb	r3, [r7, #22]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0cd      	beq.n	8002b58 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d129      	bne.n	8002c26 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	2319      	movs	r3, #25
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4921      	ldr	r1, [pc, #132]	; (8002c88 <HAL_I2C_IsDeviceReady+0x254>)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f8c6 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e036      	b.n	8002c80 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e02c      	b.n	8002c80 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c34:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c3e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2319      	movs	r3, #25
 8002c46:	2201      	movs	r2, #1
 8002c48:	490f      	ldr	r1, [pc, #60]	; (8002c88 <HAL_I2C_IsDeviceReady+0x254>)
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f8a2 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e012      	b.n	8002c80 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	f4ff af32 	bcc.w	8002ace <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002c7e:	2302      	movs	r3, #2
  }
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	00100002 	.word	0x00100002
 8002c8c:	ffff0000 	.word	0xffff0000

08002c90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d006      	beq.n	8002cba <I2C_MasterRequestWrite+0x2a>
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d003      	beq.n	8002cba <I2C_MasterRequestWrite+0x2a>
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cb8:	d108      	bne.n	8002ccc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	e00b      	b.n	8002ce4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	2b12      	cmp	r3, #18
 8002cd2:	d107      	bne.n	8002ce4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f84f 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00d      	beq.n	8002d18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0a:	d103      	bne.n	8002d14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e035      	b.n	8002d84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d20:	d108      	bne.n	8002d34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d22:	897b      	ldrh	r3, [r7, #10]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d30:	611a      	str	r2, [r3, #16]
 8002d32:	e01b      	b.n	8002d6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d34:	897b      	ldrh	r3, [r7, #10]
 8002d36:	11db      	asrs	r3, r3, #7
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f003 0306 	and.w	r3, r3, #6
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f063 030f 	orn	r3, r3, #15
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	490e      	ldr	r1, [pc, #56]	; (8002d8c <I2C_MasterRequestWrite+0xfc>)
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f898 	bl	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e010      	b.n	8002d84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d62:	897b      	ldrh	r3, [r7, #10]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	4907      	ldr	r1, [pc, #28]	; (8002d90 <I2C_MasterRequestWrite+0x100>)
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f888 	bl	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	00010008 	.word	0x00010008
 8002d90:	00010002 	.word	0x00010002

08002d94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da4:	e048      	b.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d044      	beq.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dae:	f7ff f91f 	bl	8001ff0 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d139      	bne.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	0c1b      	lsrs	r3, r3, #16
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10d      	bne.n	8002dea <I2C_WaitOnFlagUntilTimeout+0x56>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	e00c      	b.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	43da      	mvns	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4013      	ands	r3, r2
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d116      	bne.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f043 0220 	orr.w	r2, r3, #32
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e023      	b.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	0c1b      	lsrs	r3, r3, #16
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10d      	bne.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	e00c      	b.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	43da      	mvns	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d093      	beq.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e96:	e071      	b.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea6:	d123      	bne.n	8002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ec0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f043 0204 	orr.w	r2, r3, #4
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e067      	b.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef6:	d041      	beq.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef8:	f7ff f87a 	bl	8001ff0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d302      	bcc.n	8002f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d136      	bne.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d10c      	bne.n	8002f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4013      	ands	r3, r2
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bf14      	ite	ne
 8002f2a:	2301      	movne	r3, #1
 8002f2c:	2300      	moveq	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	e00b      	b.n	8002f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	43da      	mvns	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f043 0220 	orr.w	r2, r3, #32
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e021      	b.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d10c      	bne.n	8002fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e00b      	b.n	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4013      	ands	r3, r2
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f47f af6d 	bne.w	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fd4:	e034      	b.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f886 	bl	80030e8 <I2C_IsAcknowledgeFailed>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e034      	b.n	8003050 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d028      	beq.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fee:	f7fe ffff 	bl	8001ff0 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d302      	bcc.n	8003004 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d11d      	bne.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b80      	cmp	r3, #128	; 0x80
 8003010:	d016      	beq.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e007      	b.n	8003050 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	2b80      	cmp	r3, #128	; 0x80
 800304c:	d1c3      	bne.n	8002fd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003064:	e034      	b.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f83e 	bl	80030e8 <I2C_IsAcknowledgeFailed>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e034      	b.n	80030e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d028      	beq.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307e:	f7fe ffb7 	bl	8001ff0 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d11d      	bne.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d016      	beq.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f043 0220 	orr.w	r2, r3, #32
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e007      	b.n	80030e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d1c3      	bne.n	8003066 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fe:	d11b      	bne.n	8003138 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003108:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	f043 0204 	orr.w	r2, r3, #4
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e267      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d075      	beq.n	8003252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003166:	4b88      	ldr	r3, [pc, #544]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b04      	cmp	r3, #4
 8003170:	d00c      	beq.n	800318c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003172:	4b85      	ldr	r3, [pc, #532]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800317a:	2b08      	cmp	r3, #8
 800317c:	d112      	bne.n	80031a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317e:	4b82      	ldr	r3, [pc, #520]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800318a:	d10b      	bne.n	80031a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	4b7e      	ldr	r3, [pc, #504]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d05b      	beq.n	8003250 <HAL_RCC_OscConfig+0x108>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d157      	bne.n	8003250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e242      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ac:	d106      	bne.n	80031bc <HAL_RCC_OscConfig+0x74>
 80031ae:	4b76      	ldr	r3, [pc, #472]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a75      	ldr	r2, [pc, #468]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e01d      	b.n	80031f8 <HAL_RCC_OscConfig+0xb0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCC_OscConfig+0x98>
 80031c6:	4b70      	ldr	r3, [pc, #448]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a6f      	ldr	r2, [pc, #444]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4b6d      	ldr	r3, [pc, #436]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a6c      	ldr	r2, [pc, #432]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e00b      	b.n	80031f8 <HAL_RCC_OscConfig+0xb0>
 80031e0:	4b69      	ldr	r3, [pc, #420]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a68      	ldr	r2, [pc, #416]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b66      	ldr	r3, [pc, #408]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a65      	ldr	r2, [pc, #404]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d013      	beq.n	8003228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe fef6 	bl	8001ff0 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003208:	f7fe fef2 	bl	8001ff0 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e207      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b5b      	ldr	r3, [pc, #364]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0xc0>
 8003226:	e014      	b.n	8003252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fe fee2 	bl	8001ff0 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003230:	f7fe fede 	bl	8001ff0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e1f3      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003242:	4b51      	ldr	r3, [pc, #324]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0xe8>
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d063      	beq.n	8003326 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800325e:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00b      	beq.n	8003282 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326a:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003272:	2b08      	cmp	r3, #8
 8003274:	d11c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003276:	4b44      	ldr	r3, [pc, #272]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d116      	bne.n	80032b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003282:	4b41      	ldr	r3, [pc, #260]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_RCC_OscConfig+0x152>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d001      	beq.n	800329a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e1c7      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329a:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4937      	ldr	r1, [pc, #220]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ae:	e03a      	b.n	8003326 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d020      	beq.n	80032fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b8:	4b34      	ldr	r3, [pc, #208]	; (800338c <HAL_RCC_OscConfig+0x244>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fe fe97 	bl	8001ff0 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c6:	f7fe fe93 	bl	8001ff0 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e1a8      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d8:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e4:	4b28      	ldr	r3, [pc, #160]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4925      	ldr	r1, [pc, #148]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	600b      	str	r3, [r1, #0]
 80032f8:	e015      	b.n	8003326 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032fa:	4b24      	ldr	r3, [pc, #144]	; (800338c <HAL_RCC_OscConfig+0x244>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fe fe76 	bl	8001ff0 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003308:	f7fe fe72 	bl	8001ff0 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e187      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331a:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d036      	beq.n	80033a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333a:	4b15      	ldr	r3, [pc, #84]	; (8003390 <HAL_RCC_OscConfig+0x248>)
 800333c:	2201      	movs	r2, #1
 800333e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7fe fe56 	bl	8001ff0 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003348:	f7fe fe52 	bl	8001ff0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e167      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335a:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800335c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0x200>
 8003366:	e01b      	b.n	80033a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <HAL_RCC_OscConfig+0x248>)
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336e:	f7fe fe3f 	bl	8001ff0 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003374:	e00e      	b.n	8003394 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003376:	f7fe fe3b 	bl	8001ff0 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d907      	bls.n	8003394 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e150      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
 8003388:	40023800 	.word	0x40023800
 800338c:	42470000 	.word	0x42470000
 8003390:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003394:	4b88      	ldr	r3, [pc, #544]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1ea      	bne.n	8003376 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8097 	beq.w	80034dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b2:	4b81      	ldr	r3, [pc, #516]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10f      	bne.n	80033de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	4b7d      	ldr	r3, [pc, #500]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	4a7c      	ldr	r2, [pc, #496]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033cc:	6413      	str	r3, [r2, #64]	; 0x40
 80033ce:	4b7a      	ldr	r3, [pc, #488]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033de:	4b77      	ldr	r3, [pc, #476]	; (80035bc <HAL_RCC_OscConfig+0x474>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d118      	bne.n	800341c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ea:	4b74      	ldr	r3, [pc, #464]	; (80035bc <HAL_RCC_OscConfig+0x474>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a73      	ldr	r2, [pc, #460]	; (80035bc <HAL_RCC_OscConfig+0x474>)
 80033f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f6:	f7fe fdfb 	bl	8001ff0 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fe:	f7fe fdf7 	bl	8001ff0 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e10c      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	4b6a      	ldr	r3, [pc, #424]	; (80035bc <HAL_RCC_OscConfig+0x474>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d106      	bne.n	8003432 <HAL_RCC_OscConfig+0x2ea>
 8003424:	4b64      	ldr	r3, [pc, #400]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	4a63      	ldr	r2, [pc, #396]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6713      	str	r3, [r2, #112]	; 0x70
 8003430:	e01c      	b.n	800346c <HAL_RCC_OscConfig+0x324>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b05      	cmp	r3, #5
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0x30c>
 800343a:	4b5f      	ldr	r3, [pc, #380]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	4a5e      	ldr	r2, [pc, #376]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003440:	f043 0304 	orr.w	r3, r3, #4
 8003444:	6713      	str	r3, [r2, #112]	; 0x70
 8003446:	4b5c      	ldr	r3, [pc, #368]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	4a5b      	ldr	r2, [pc, #364]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6713      	str	r3, [r2, #112]	; 0x70
 8003452:	e00b      	b.n	800346c <HAL_RCC_OscConfig+0x324>
 8003454:	4b58      	ldr	r3, [pc, #352]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	4a57      	ldr	r2, [pc, #348]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	; 0x70
 8003460:	4b55      	ldr	r3, [pc, #340]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	4a54      	ldr	r2, [pc, #336]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003466:	f023 0304 	bic.w	r3, r3, #4
 800346a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d015      	beq.n	80034a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003474:	f7fe fdbc 	bl	8001ff0 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347a:	e00a      	b.n	8003492 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f7fe fdb8 	bl	8001ff0 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	; 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0cb      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003492:	4b49      	ldr	r3, [pc, #292]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0ee      	beq.n	800347c <HAL_RCC_OscConfig+0x334>
 800349e:	e014      	b.n	80034ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a0:	f7fe fda6 	bl	8001ff0 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fe fda2 	bl	8001ff0 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e0b5      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034be:	4b3e      	ldr	r3, [pc, #248]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1ee      	bne.n	80034a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d105      	bne.n	80034dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d0:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	4a38      	ldr	r2, [pc, #224]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80a1 	beq.w	8003628 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034e6:	4b34      	ldr	r3, [pc, #208]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d05c      	beq.n	80035ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d141      	bne.n	800357e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <HAL_RCC_OscConfig+0x478>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fe fd76 	bl	8001ff0 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003508:	f7fe fd72 	bl	8001ff0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e087      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	019b      	lsls	r3, r3, #6
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	085b      	lsrs	r3, r3, #1
 800353e:	3b01      	subs	r3, #1
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	061b      	lsls	r3, r3, #24
 800354a:	491b      	ldr	r1, [pc, #108]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <HAL_RCC_OscConfig+0x478>)
 8003552:	2201      	movs	r2, #1
 8003554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fe fd4b 	bl	8001ff0 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355e:	f7fe fd47 	bl	8001ff0 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e05c      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003570:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x416>
 800357c:	e054      	b.n	8003628 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357e:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <HAL_RCC_OscConfig+0x478>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fe fd34 	bl	8001ff0 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358c:	f7fe fd30 	bl	8001ff0 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e045      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x444>
 80035aa:	e03d      	b.n	8003628 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d107      	bne.n	80035c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e038      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40007000 	.word	0x40007000
 80035c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCC_OscConfig+0x4ec>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d028      	beq.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d121      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d11a      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035f4:	4013      	ands	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d111      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	085b      	lsrs	r3, r3, #1
 800360c:	3b01      	subs	r3, #1
 800360e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d107      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800

08003638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0cc      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800364c:	4b68      	ldr	r3, [pc, #416]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d90c      	bls.n	8003674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b65      	ldr	r3, [pc, #404]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b63      	ldr	r3, [pc, #396]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0b8      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800368c:	4b59      	ldr	r3, [pc, #356]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a58      	ldr	r2, [pc, #352]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a4:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a52      	ldr	r2, [pc, #328]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b50      	ldr	r3, [pc, #320]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	494d      	ldr	r1, [pc, #308]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d044      	beq.n	8003758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d119      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e07f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f6:	4b3f      	ldr	r3, [pc, #252]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e06f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	4b3b      	ldr	r3, [pc, #236]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e067      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003716:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 0203 	bic.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4934      	ldr	r1, [pc, #208]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	4313      	orrs	r3, r2
 8003726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003728:	f7fe fc62 	bl	8001ff0 <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	e00a      	b.n	8003746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003730:	f7fe fc5e 	bl	8001ff0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	; 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e04f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 020c 	and.w	r2, r3, #12
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	429a      	cmp	r2, r3
 8003756:	d1eb      	bne.n	8003730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003758:	4b25      	ldr	r3, [pc, #148]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d20c      	bcs.n	8003780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e032      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4916      	ldr	r1, [pc, #88]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	490e      	ldr	r1, [pc, #56]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037be:	f000 f821 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 80037c2:	4602      	mov	r2, r0
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	490a      	ldr	r1, [pc, #40]	; (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	5ccb      	ldrb	r3, [r1, r3]
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	4a09      	ldr	r2, [pc, #36]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_ClockConfig+0x1c8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe faf8 	bl	8001dd4 <HAL_InitTick>

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40023c00 	.word	0x40023c00
 80037f4:	40023800 	.word	0x40023800
 80037f8:	08007600 	.word	0x08007600
 80037fc:	2000000c 	.word	0x2000000c
 8003800:	20000010 	.word	0x20000010

08003804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003808:	b090      	sub	sp, #64	; 0x40
 800380a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	637b      	str	r3, [r7, #52]	; 0x34
 8003810:	2300      	movs	r3, #0
 8003812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003814:	2300      	movs	r3, #0
 8003816:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800381c:	4b59      	ldr	r3, [pc, #356]	; (8003984 <HAL_RCC_GetSysClockFreq+0x180>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b08      	cmp	r3, #8
 8003826:	d00d      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x40>
 8003828:	2b08      	cmp	r3, #8
 800382a:	f200 80a1 	bhi.w	8003970 <HAL_RCC_GetSysClockFreq+0x16c>
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x34>
 8003832:	2b04      	cmp	r3, #4
 8003834:	d003      	beq.n	800383e <HAL_RCC_GetSysClockFreq+0x3a>
 8003836:	e09b      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003838:	4b53      	ldr	r3, [pc, #332]	; (8003988 <HAL_RCC_GetSysClockFreq+0x184>)
 800383a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800383c:	e09b      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800383e:	4b53      	ldr	r3, [pc, #332]	; (800398c <HAL_RCC_GetSysClockFreq+0x188>)
 8003840:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003842:	e098      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003844:	4b4f      	ldr	r3, [pc, #316]	; (8003984 <HAL_RCC_GetSysClockFreq+0x180>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800384c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800384e:	4b4d      	ldr	r3, [pc, #308]	; (8003984 <HAL_RCC_GetSysClockFreq+0x180>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d028      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800385a:	4b4a      	ldr	r3, [pc, #296]	; (8003984 <HAL_RCC_GetSysClockFreq+0x180>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	099b      	lsrs	r3, r3, #6
 8003860:	2200      	movs	r2, #0
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	627a      	str	r2, [r7, #36]	; 0x24
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800386c:	2100      	movs	r1, #0
 800386e:	4b47      	ldr	r3, [pc, #284]	; (800398c <HAL_RCC_GetSysClockFreq+0x188>)
 8003870:	fb03 f201 	mul.w	r2, r3, r1
 8003874:	2300      	movs	r3, #0
 8003876:	fb00 f303 	mul.w	r3, r0, r3
 800387a:	4413      	add	r3, r2
 800387c:	4a43      	ldr	r2, [pc, #268]	; (800398c <HAL_RCC_GetSysClockFreq+0x188>)
 800387e:	fba0 1202 	umull	r1, r2, r0, r2
 8003882:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003884:	460a      	mov	r2, r1
 8003886:	62ba      	str	r2, [r7, #40]	; 0x28
 8003888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800388a:	4413      	add	r3, r2
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003890:	2200      	movs	r2, #0
 8003892:	61bb      	str	r3, [r7, #24]
 8003894:	61fa      	str	r2, [r7, #28]
 8003896:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800389a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800389e:	f7fd f8bd 	bl	8000a1c <__aeabi_uldivmod>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4613      	mov	r3, r2
 80038a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038aa:	e053      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ac:	4b35      	ldr	r3, [pc, #212]	; (8003984 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	099b      	lsrs	r3, r3, #6
 80038b2:	2200      	movs	r2, #0
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	617a      	str	r2, [r7, #20]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038be:	f04f 0b00 	mov.w	fp, #0
 80038c2:	4652      	mov	r2, sl
 80038c4:	465b      	mov	r3, fp
 80038c6:	f04f 0000 	mov.w	r0, #0
 80038ca:	f04f 0100 	mov.w	r1, #0
 80038ce:	0159      	lsls	r1, r3, #5
 80038d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d4:	0150      	lsls	r0, r2, #5
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	ebb2 080a 	subs.w	r8, r2, sl
 80038de:	eb63 090b 	sbc.w	r9, r3, fp
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038f6:	ebb2 0408 	subs.w	r4, r2, r8
 80038fa:	eb63 0509 	sbc.w	r5, r3, r9
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	00eb      	lsls	r3, r5, #3
 8003908:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800390c:	00e2      	lsls	r2, r4, #3
 800390e:	4614      	mov	r4, r2
 8003910:	461d      	mov	r5, r3
 8003912:	eb14 030a 	adds.w	r3, r4, sl
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	eb45 030b 	adc.w	r3, r5, fp
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800392a:	4629      	mov	r1, r5
 800392c:	028b      	lsls	r3, r1, #10
 800392e:	4621      	mov	r1, r4
 8003930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003934:	4621      	mov	r1, r4
 8003936:	028a      	lsls	r2, r1, #10
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393e:	2200      	movs	r2, #0
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	60fa      	str	r2, [r7, #12]
 8003944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003948:	f7fd f868 	bl	8000a1c <__aeabi_uldivmod>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4613      	mov	r3, r2
 8003952:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_GetSysClockFreq+0x180>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	3301      	adds	r3, #1
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003964:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800396e:	e002      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetSysClockFreq+0x184>)
 8003972:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003978:	4618      	mov	r0, r3
 800397a:	3740      	adds	r7, #64	; 0x40
 800397c:	46bd      	mov	sp, r7
 800397e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800
 8003988:	00f42400 	.word	0x00f42400
 800398c:	017d7840 	.word	0x017d7840

08003990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	2000000c 	.word	0x2000000c

080039a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039ac:	f7ff fff0 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039b0:	4602      	mov	r2, r0
 80039b2:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	0a9b      	lsrs	r3, r3, #10
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	4903      	ldr	r1, [pc, #12]	; (80039cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039be:	5ccb      	ldrb	r3, [r1, r3]
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40023800 	.word	0x40023800
 80039cc:	08007610 	.word	0x08007610

080039d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039d4:	f7ff ffdc 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	0b5b      	lsrs	r3, r3, #13
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4903      	ldr	r1, [pc, #12]	; (80039f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40023800 	.word	0x40023800
 80039f4:	08007610 	.word	0x08007610

080039f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	220f      	movs	r2, #15
 8003a06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a08:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_RCC_GetClockConfig+0x5c>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0203 	and.w	r2, r3, #3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <HAL_RCC_GetClockConfig+0x5c>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <HAL_RCC_GetClockConfig+0x5c>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_RCC_GetClockConfig+0x5c>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	08db      	lsrs	r3, r3, #3
 8003a32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a3a:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <HAL_RCC_GetClockConfig+0x60>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0207 	and.w	r2, r3, #7
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	601a      	str	r2, [r3, #0]
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40023c00 	.word	0x40023c00

08003a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e041      	b.n	8003af2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fe f916 	bl	8001cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f000 fbda 	bl	8004254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d001      	beq.n	8003b14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e046      	b.n	8003ba2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <HAL_TIM_Base_Start+0xb4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d022      	beq.n	8003b6c <HAL_TIM_Base_Start+0x70>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2e:	d01d      	beq.n	8003b6c <HAL_TIM_Base_Start+0x70>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <HAL_TIM_Base_Start+0xb8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d018      	beq.n	8003b6c <HAL_TIM_Base_Start+0x70>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <HAL_TIM_Base_Start+0xbc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d013      	beq.n	8003b6c <HAL_TIM_Base_Start+0x70>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <HAL_TIM_Base_Start+0xc0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00e      	beq.n	8003b6c <HAL_TIM_Base_Start+0x70>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1b      	ldr	r2, [pc, #108]	; (8003bc0 <HAL_TIM_Base_Start+0xc4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d009      	beq.n	8003b6c <HAL_TIM_Base_Start+0x70>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a19      	ldr	r2, [pc, #100]	; (8003bc4 <HAL_TIM_Base_Start+0xc8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <HAL_TIM_Base_Start+0x70>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <HAL_TIM_Base_Start+0xcc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d111      	bne.n	8003b90 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b06      	cmp	r3, #6
 8003b7c:	d010      	beq.n	8003ba0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8e:	e007      	b.n	8003ba0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40010000 	.word	0x40010000
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800
 8003bbc:	40000c00 	.word	0x40000c00
 8003bc0:	40010400 	.word	0x40010400
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	40001800 	.word	0x40001800

08003bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d001      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e04e      	b.n	8003c82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a23      	ldr	r2, [pc, #140]	; (8003c90 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d022      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x80>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0e:	d01d      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x80>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1f      	ldr	r2, [pc, #124]	; (8003c94 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d018      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x80>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1e      	ldr	r2, [pc, #120]	; (8003c98 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d013      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x80>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <HAL_TIM_Base_Start_IT+0xd0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00e      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x80>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d009      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x80>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a19      	ldr	r2, [pc, #100]	; (8003ca4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x80>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d111      	bne.n	8003c70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b06      	cmp	r3, #6
 8003c5c:	d010      	beq.n	8003c80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0201 	orr.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6e:	e007      	b.n	8003c80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40010000 	.word	0x40010000
 8003c94:	40000400 	.word	0x40000400
 8003c98:	40000800 	.word	0x40000800
 8003c9c:	40000c00 	.word	0x40000c00
 8003ca0:	40010400 	.word	0x40010400
 8003ca4:	40014000 	.word	0x40014000
 8003ca8:	40001800 	.word	0x40001800

08003cac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e041      	b.n	8003d42 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f839 	bl	8003d4a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4610      	mov	r0, r2
 8003cec:	f000 fab2 	bl	8004254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d020      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d01b      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f06f 0202 	mvn.w	r2, #2
 8003d92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fa35 	bl	8004218 <HAL_TIM_IC_CaptureCallback>
 8003dae:	e005      	b.n	8003dbc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fa27 	bl	8004204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fa38 	bl	800422c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d020      	beq.n	8003e0e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01b      	beq.n	8003e0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f06f 0204 	mvn.w	r2, #4
 8003dde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fa0f 	bl	8004218 <HAL_TIM_IC_CaptureCallback>
 8003dfa:	e005      	b.n	8003e08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fa01 	bl	8004204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa12 	bl	800422c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d020      	beq.n	8003e5a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01b      	beq.n	8003e5a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f06f 0208 	mvn.w	r2, #8
 8003e2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2204      	movs	r2, #4
 8003e30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f9e9 	bl	8004218 <HAL_TIM_IC_CaptureCallback>
 8003e46:	e005      	b.n	8003e54 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f9db 	bl	8004204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f9ec 	bl	800422c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d020      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01b      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f06f 0210 	mvn.w	r2, #16
 8003e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f9c3 	bl	8004218 <HAL_TIM_IC_CaptureCallback>
 8003e92:	e005      	b.n	8003ea0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f9b5 	bl	8004204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f9c6 	bl	800422c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00c      	beq.n	8003eca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f06f 0201 	mvn.w	r2, #1
 8003ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7fd fba5 	bl	8001614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00c      	beq.n	8003eee <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fca9 	bl	8004840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00c      	beq.n	8003f12 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f997 	bl	8004240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00c      	beq.n	8003f36 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f06f 0220 	mvn.w	r2, #32
 8003f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fc7b 	bl	800482c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_TIM_IC_ConfigChannel+0x1e>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e088      	b.n	800406e <HAL_TIM_IC_ConfigChannel+0x130>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d11b      	bne.n	8003fa2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003f7a:	f000 fa17 	bl	80043ac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699a      	ldr	r2, [r3, #24]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 020c 	bic.w	r2, r2, #12
 8003f8c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6999      	ldr	r1, [r3, #24]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	619a      	str	r2, [r3, #24]
 8003fa0:	e060      	b.n	8004064 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d11c      	bne.n	8003fe2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003fb8:	f000 fa9b 	bl	80044f2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003fca:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6999      	ldr	r1, [r3, #24]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	021a      	lsls	r2, r3, #8
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	619a      	str	r2, [r3, #24]
 8003fe0:	e040      	b.n	8004064 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d11b      	bne.n	8004020 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003ff8:	f000 fae8 	bl	80045cc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69da      	ldr	r2, [r3, #28]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 020c 	bic.w	r2, r2, #12
 800400a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69d9      	ldr	r1, [r3, #28]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	61da      	str	r2, [r3, #28]
 800401e:	e021      	b.n	8004064 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b0c      	cmp	r3, #12
 8004024:	d11c      	bne.n	8004060 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004036:	f000 fb05 	bl	8004644 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004048:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69d9      	ldr	r1, [r3, #28]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	021a      	lsls	r2, r3, #8
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	61da      	str	r2, [r3, #28]
 800405e:	e001      	b.n	8004064 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800406c:	7dfb      	ldrb	r3, [r7, #23]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_TIM_ConfigClockSource+0x1c>
 800408e:	2302      	movs	r3, #2
 8004090:	e0b4      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x186>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2202      	movs	r2, #2
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ca:	d03e      	beq.n	800414a <HAL_TIM_ConfigClockSource+0xd4>
 80040cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d0:	f200 8087 	bhi.w	80041e2 <HAL_TIM_ConfigClockSource+0x16c>
 80040d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d8:	f000 8086 	beq.w	80041e8 <HAL_TIM_ConfigClockSource+0x172>
 80040dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e0:	d87f      	bhi.n	80041e2 <HAL_TIM_ConfigClockSource+0x16c>
 80040e2:	2b70      	cmp	r3, #112	; 0x70
 80040e4:	d01a      	beq.n	800411c <HAL_TIM_ConfigClockSource+0xa6>
 80040e6:	2b70      	cmp	r3, #112	; 0x70
 80040e8:	d87b      	bhi.n	80041e2 <HAL_TIM_ConfigClockSource+0x16c>
 80040ea:	2b60      	cmp	r3, #96	; 0x60
 80040ec:	d050      	beq.n	8004190 <HAL_TIM_ConfigClockSource+0x11a>
 80040ee:	2b60      	cmp	r3, #96	; 0x60
 80040f0:	d877      	bhi.n	80041e2 <HAL_TIM_ConfigClockSource+0x16c>
 80040f2:	2b50      	cmp	r3, #80	; 0x50
 80040f4:	d03c      	beq.n	8004170 <HAL_TIM_ConfigClockSource+0xfa>
 80040f6:	2b50      	cmp	r3, #80	; 0x50
 80040f8:	d873      	bhi.n	80041e2 <HAL_TIM_ConfigClockSource+0x16c>
 80040fa:	2b40      	cmp	r3, #64	; 0x40
 80040fc:	d058      	beq.n	80041b0 <HAL_TIM_ConfigClockSource+0x13a>
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d86f      	bhi.n	80041e2 <HAL_TIM_ConfigClockSource+0x16c>
 8004102:	2b30      	cmp	r3, #48	; 0x30
 8004104:	d064      	beq.n	80041d0 <HAL_TIM_ConfigClockSource+0x15a>
 8004106:	2b30      	cmp	r3, #48	; 0x30
 8004108:	d86b      	bhi.n	80041e2 <HAL_TIM_ConfigClockSource+0x16c>
 800410a:	2b20      	cmp	r3, #32
 800410c:	d060      	beq.n	80041d0 <HAL_TIM_ConfigClockSource+0x15a>
 800410e:	2b20      	cmp	r3, #32
 8004110:	d867      	bhi.n	80041e2 <HAL_TIM_ConfigClockSource+0x16c>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d05c      	beq.n	80041d0 <HAL_TIM_ConfigClockSource+0x15a>
 8004116:	2b10      	cmp	r3, #16
 8004118:	d05a      	beq.n	80041d0 <HAL_TIM_ConfigClockSource+0x15a>
 800411a:	e062      	b.n	80041e2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800412c:	f000 fae2 	bl	80046f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800413e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	609a      	str	r2, [r3, #8]
      break;
 8004148:	e04f      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800415a:	f000 facb 	bl	80046f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800416c:	609a      	str	r2, [r3, #8]
      break;
 800416e:	e03c      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800417c:	461a      	mov	r2, r3
 800417e:	f000 f989 	bl	8004494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2150      	movs	r1, #80	; 0x50
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fa98 	bl	80046be <TIM_ITRx_SetConfig>
      break;
 800418e:	e02c      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800419c:	461a      	mov	r2, r3
 800419e:	f000 f9e5 	bl	800456c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2160      	movs	r1, #96	; 0x60
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fa88 	bl	80046be <TIM_ITRx_SetConfig>
      break;
 80041ae:	e01c      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041bc:	461a      	mov	r2, r3
 80041be:	f000 f969 	bl	8004494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2140      	movs	r1, #64	; 0x40
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fa78 	bl	80046be <TIM_ITRx_SetConfig>
      break;
 80041ce:	e00c      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f000 fa6f 	bl	80046be <TIM_ITRx_SetConfig>
      break;
 80041e0:	e003      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
      break;
 80041e6:	e000      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a46      	ldr	r2, [pc, #280]	; (8004380 <TIM_Base_SetConfig+0x12c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d013      	beq.n	8004294 <TIM_Base_SetConfig+0x40>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004272:	d00f      	beq.n	8004294 <TIM_Base_SetConfig+0x40>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a43      	ldr	r2, [pc, #268]	; (8004384 <TIM_Base_SetConfig+0x130>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00b      	beq.n	8004294 <TIM_Base_SetConfig+0x40>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a42      	ldr	r2, [pc, #264]	; (8004388 <TIM_Base_SetConfig+0x134>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d007      	beq.n	8004294 <TIM_Base_SetConfig+0x40>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a41      	ldr	r2, [pc, #260]	; (800438c <TIM_Base_SetConfig+0x138>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d003      	beq.n	8004294 <TIM_Base_SetConfig+0x40>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a40      	ldr	r2, [pc, #256]	; (8004390 <TIM_Base_SetConfig+0x13c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d108      	bne.n	80042a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a35      	ldr	r2, [pc, #212]	; (8004380 <TIM_Base_SetConfig+0x12c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d02b      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b4:	d027      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a32      	ldr	r2, [pc, #200]	; (8004384 <TIM_Base_SetConfig+0x130>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d023      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a31      	ldr	r2, [pc, #196]	; (8004388 <TIM_Base_SetConfig+0x134>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d01f      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a30      	ldr	r2, [pc, #192]	; (800438c <TIM_Base_SetConfig+0x138>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d01b      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a2f      	ldr	r2, [pc, #188]	; (8004390 <TIM_Base_SetConfig+0x13c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d017      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a2e      	ldr	r2, [pc, #184]	; (8004394 <TIM_Base_SetConfig+0x140>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d013      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a2d      	ldr	r2, [pc, #180]	; (8004398 <TIM_Base_SetConfig+0x144>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00f      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a2c      	ldr	r2, [pc, #176]	; (800439c <TIM_Base_SetConfig+0x148>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00b      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2b      	ldr	r2, [pc, #172]	; (80043a0 <TIM_Base_SetConfig+0x14c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d007      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a2a      	ldr	r2, [pc, #168]	; (80043a4 <TIM_Base_SetConfig+0x150>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d003      	beq.n	8004306 <TIM_Base_SetConfig+0xb2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a29      	ldr	r2, [pc, #164]	; (80043a8 <TIM_Base_SetConfig+0x154>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d108      	bne.n	8004318 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a10      	ldr	r2, [pc, #64]	; (8004380 <TIM_Base_SetConfig+0x12c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d003      	beq.n	800434c <TIM_Base_SetConfig+0xf8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a12      	ldr	r2, [pc, #72]	; (8004390 <TIM_Base_SetConfig+0x13c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d103      	bne.n	8004354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b01      	cmp	r3, #1
 8004364:	d105      	bne.n	8004372 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f023 0201 	bic.w	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	611a      	str	r2, [r3, #16]
  }
}
 8004372:	bf00      	nop
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40010000 	.word	0x40010000
 8004384:	40000400 	.word	0x40000400
 8004388:	40000800 	.word	0x40000800
 800438c:	40000c00 	.word	0x40000c00
 8004390:	40010400 	.word	0x40010400
 8004394:	40014000 	.word	0x40014000
 8004398:	40014400 	.word	0x40014400
 800439c:	40014800 	.word	0x40014800
 80043a0:	40001800 	.word	0x40001800
 80043a4:	40001c00 	.word	0x40001c00
 80043a8:	40002000 	.word	0x40002000

080043ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f023 0201 	bic.w	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4a28      	ldr	r2, [pc, #160]	; (8004478 <TIM_TI1_SetConfig+0xcc>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01b      	beq.n	8004412 <TIM_TI1_SetConfig+0x66>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e0:	d017      	beq.n	8004412 <TIM_TI1_SetConfig+0x66>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a25      	ldr	r2, [pc, #148]	; (800447c <TIM_TI1_SetConfig+0xd0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <TIM_TI1_SetConfig+0x66>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4a24      	ldr	r2, [pc, #144]	; (8004480 <TIM_TI1_SetConfig+0xd4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00f      	beq.n	8004412 <TIM_TI1_SetConfig+0x66>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4a23      	ldr	r2, [pc, #140]	; (8004484 <TIM_TI1_SetConfig+0xd8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00b      	beq.n	8004412 <TIM_TI1_SetConfig+0x66>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4a22      	ldr	r2, [pc, #136]	; (8004488 <TIM_TI1_SetConfig+0xdc>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d007      	beq.n	8004412 <TIM_TI1_SetConfig+0x66>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4a21      	ldr	r2, [pc, #132]	; (800448c <TIM_TI1_SetConfig+0xe0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d003      	beq.n	8004412 <TIM_TI1_SetConfig+0x66>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4a20      	ldr	r2, [pc, #128]	; (8004490 <TIM_TI1_SetConfig+0xe4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d101      	bne.n	8004416 <TIM_TI1_SetConfig+0x6a>
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <TIM_TI1_SetConfig+0x6c>
 8004416:	2300      	movs	r3, #0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 0303 	bic.w	r3, r3, #3
 8004422:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	e003      	b.n	8004436 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800443c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	b2db      	uxtb	r3, r3
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f023 030a 	bic.w	r3, r3, #10
 8004450:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f003 030a 	and.w	r3, r3, #10
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40010000 	.word	0x40010000
 800447c:	40000400 	.word	0x40000400
 8004480:	40000800 	.word	0x40000800
 8004484:	40000c00 	.word	0x40000c00
 8004488:	40010400 	.word	0x40010400
 800448c:	40014000 	.word	0x40014000
 8004490:	40001800 	.word	0x40001800

08004494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f023 0201 	bic.w	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f023 030a 	bic.w	r3, r3, #10
 80044d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	621a      	str	r2, [r3, #32]
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b087      	sub	sp, #28
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f023 0210 	bic.w	r2, r3, #16
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004530:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	031b      	lsls	r3, r3, #12
 8004536:	b29b      	uxth	r3, r3
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004544:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	621a      	str	r2, [r3, #32]
}
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f023 0210 	bic.w	r2, r3, #16
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	031b      	lsls	r3, r3, #12
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	621a      	str	r2, [r3, #32]
}
 80045c0:	bf00      	nop
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f023 0303 	bic.w	r3, r3, #3
 80045f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004608:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	b2db      	uxtb	r3, r3
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800461c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	621a      	str	r2, [r3, #32]
}
 8004638:	bf00      	nop
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004670:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004682:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	031b      	lsls	r3, r3, #12
 8004688:	b29b      	uxth	r3, r3
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004696:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	031b      	lsls	r3, r3, #12
 800469c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	621a      	str	r2, [r3, #32]
}
 80046b2:	bf00      	nop
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	f043 0307 	orr.w	r3, r3, #7
 80046e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	609a      	str	r2, [r3, #8]
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800470e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	021a      	lsls	r2, r3, #8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	431a      	orrs	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4313      	orrs	r3, r2
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	609a      	str	r2, [r3, #8]
}
 8004728:	bf00      	nop
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004748:	2302      	movs	r3, #2
 800474a:	e05a      	b.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a21      	ldr	r2, [pc, #132]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d022      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004798:	d01d      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d018      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1b      	ldr	r2, [pc, #108]	; (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1a      	ldr	r2, [pc, #104]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00e      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a18      	ldr	r2, [pc, #96]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d009      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a17      	ldr	r2, [pc, #92]	; (8004824 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a15      	ldr	r2, [pc, #84]	; (8004828 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d10c      	bne.n	80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40010000 	.word	0x40010000
 8004814:	40000400 	.word	0x40000400
 8004818:	40000800 	.word	0x40000800
 800481c:	40000c00 	.word	0x40000c00
 8004820:	40010400 	.word	0x40010400
 8004824:	40014000 	.word	0x40014000
 8004828:	40001800 	.word	0x40001800

0800482c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e042      	b.n	80048ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fd fa62 	bl	8001d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2224      	movs	r2, #36	; 0x24
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004896:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f973 	bl	8004b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695a      	ldr	r2, [r3, #20]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08a      	sub	sp, #40	; 0x28
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b20      	cmp	r3, #32
 8004912:	d175      	bne.n	8004a00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_UART_Transmit+0x2c>
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e06e      	b.n	8004a02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2221      	movs	r2, #33	; 0x21
 800492e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004932:	f7fd fb5d 	bl	8001ff0 <HAL_GetTick>
 8004936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	88fa      	ldrh	r2, [r7, #6]
 8004942:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494c:	d108      	bne.n	8004960 <HAL_UART_Transmit+0x6c>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d104      	bne.n	8004960 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	e003      	b.n	8004968 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004964:	2300      	movs	r3, #0
 8004966:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004968:	e02e      	b.n	80049c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2200      	movs	r2, #0
 8004972:	2180      	movs	r1, #128	; 0x80
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f848 	bl	8004a0a <UART_WaitOnFlagUntilTimeout>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e03a      	b.n	8004a02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10b      	bne.n	80049aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	3302      	adds	r3, #2
 80049a6:	61bb      	str	r3, [r7, #24]
 80049a8:	e007      	b.n	80049ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	781a      	ldrb	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	3301      	adds	r3, #1
 80049b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1cb      	bne.n	800496a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2200      	movs	r2, #0
 80049da:	2140      	movs	r1, #64	; 0x40
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f814 	bl	8004a0a <UART_WaitOnFlagUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e006      	b.n	8004a02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	e000      	b.n	8004a02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a00:	2302      	movs	r3, #2
  }
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b086      	sub	sp, #24
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	4613      	mov	r3, r2
 8004a18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1a:	e03b      	b.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a22:	d037      	beq.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a24:	f7fd fae4 	bl	8001ff0 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	6a3a      	ldr	r2, [r7, #32]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d302      	bcc.n	8004a3a <UART_WaitOnFlagUntilTimeout+0x30>
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e03a      	b.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d023      	beq.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d020      	beq.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d01d      	beq.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d116      	bne.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a66:	2300      	movs	r3, #0
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f81d 	bl	8004abc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2208      	movs	r2, #8
 8004a86:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e00f      	b.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d0b4      	beq.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b095      	sub	sp, #84	; 0x54
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	330c      	adds	r3, #12
 8004aca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	330c      	adds	r3, #12
 8004ae2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ae4:	643a      	str	r2, [r7, #64]	; 0x40
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004aea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e5      	bne.n	8004ac4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3314      	adds	r3, #20
 8004afe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3314      	adds	r3, #20
 8004b16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e5      	bne.n	8004af8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d119      	bne.n	8004b68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f023 0310 	bic.w	r3, r3, #16
 8004b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	330c      	adds	r3, #12
 8004b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b54:	61ba      	str	r2, [r7, #24]
 8004b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	6979      	ldr	r1, [r7, #20]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	613b      	str	r3, [r7, #16]
   return(result);
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e5      	bne.n	8004b34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b76:	bf00      	nop
 8004b78:	3754      	adds	r7, #84	; 0x54
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
	...

08004b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b88:	b0c0      	sub	sp, #256	; 0x100
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba0:	68d9      	ldr	r1, [r3, #12]
 8004ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	ea40 0301 	orr.w	r3, r0, r1
 8004bac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bdc:	f021 010c 	bic.w	r1, r1, #12
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bea:	430b      	orrs	r3, r1
 8004bec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfe:	6999      	ldr	r1, [r3, #24]
 8004c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	ea40 0301 	orr.w	r3, r0, r1
 8004c0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4b8f      	ldr	r3, [pc, #572]	; (8004e50 <UART_SetConfig+0x2cc>)
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d005      	beq.n	8004c24 <UART_SetConfig+0xa0>
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4b8d      	ldr	r3, [pc, #564]	; (8004e54 <UART_SetConfig+0x2d0>)
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d104      	bne.n	8004c2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c24:	f7fe fed4 	bl	80039d0 <HAL_RCC_GetPCLK2Freq>
 8004c28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c2c:	e003      	b.n	8004c36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c2e:	f7fe febb 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 8004c32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c40:	f040 810c 	bne.w	8004e5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c56:	4622      	mov	r2, r4
 8004c58:	462b      	mov	r3, r5
 8004c5a:	1891      	adds	r1, r2, r2
 8004c5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c5e:	415b      	adcs	r3, r3
 8004c60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c66:	4621      	mov	r1, r4
 8004c68:	eb12 0801 	adds.w	r8, r2, r1
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	eb43 0901 	adc.w	r9, r3, r1
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c86:	4690      	mov	r8, r2
 8004c88:	4699      	mov	r9, r3
 8004c8a:	4623      	mov	r3, r4
 8004c8c:	eb18 0303 	adds.w	r3, r8, r3
 8004c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c94:	462b      	mov	r3, r5
 8004c96:	eb49 0303 	adc.w	r3, r9, r3
 8004c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004caa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004cae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	18db      	adds	r3, r3, r3
 8004cb6:	653b      	str	r3, [r7, #80]	; 0x50
 8004cb8:	4613      	mov	r3, r2
 8004cba:	eb42 0303 	adc.w	r3, r2, r3
 8004cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8004cc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004cc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004cc8:	f7fb fea8 	bl	8000a1c <__aeabi_uldivmod>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4b61      	ldr	r3, [pc, #388]	; (8004e58 <UART_SetConfig+0x2d4>)
 8004cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	011c      	lsls	r4, r3, #4
 8004cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ce4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ce8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cec:	4642      	mov	r2, r8
 8004cee:	464b      	mov	r3, r9
 8004cf0:	1891      	adds	r1, r2, r2
 8004cf2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cf4:	415b      	adcs	r3, r3
 8004cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cfc:	4641      	mov	r1, r8
 8004cfe:	eb12 0a01 	adds.w	sl, r2, r1
 8004d02:	4649      	mov	r1, r9
 8004d04:	eb43 0b01 	adc.w	fp, r3, r1
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d1c:	4692      	mov	sl, r2
 8004d1e:	469b      	mov	fp, r3
 8004d20:	4643      	mov	r3, r8
 8004d22:	eb1a 0303 	adds.w	r3, sl, r3
 8004d26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d2a:	464b      	mov	r3, r9
 8004d2c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	18db      	adds	r3, r3, r3
 8004d4c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d4e:	4613      	mov	r3, r2
 8004d50:	eb42 0303 	adc.w	r3, r2, r3
 8004d54:	647b      	str	r3, [r7, #68]	; 0x44
 8004d56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d5e:	f7fb fe5d 	bl	8000a1c <__aeabi_uldivmod>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4611      	mov	r1, r2
 8004d68:	4b3b      	ldr	r3, [pc, #236]	; (8004e58 <UART_SetConfig+0x2d4>)
 8004d6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	2264      	movs	r2, #100	; 0x64
 8004d72:	fb02 f303 	mul.w	r3, r2, r3
 8004d76:	1acb      	subs	r3, r1, r3
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d7e:	4b36      	ldr	r3, [pc, #216]	; (8004e58 <UART_SetConfig+0x2d4>)
 8004d80:	fba3 2302 	umull	r2, r3, r3, r2
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d8c:	441c      	add	r4, r3
 8004d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004da0:	4642      	mov	r2, r8
 8004da2:	464b      	mov	r3, r9
 8004da4:	1891      	adds	r1, r2, r2
 8004da6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004da8:	415b      	adcs	r3, r3
 8004daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004db0:	4641      	mov	r1, r8
 8004db2:	1851      	adds	r1, r2, r1
 8004db4:	6339      	str	r1, [r7, #48]	; 0x30
 8004db6:	4649      	mov	r1, r9
 8004db8:	414b      	adcs	r3, r1
 8004dba:	637b      	str	r3, [r7, #52]	; 0x34
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004dc8:	4659      	mov	r1, fp
 8004dca:	00cb      	lsls	r3, r1, #3
 8004dcc:	4651      	mov	r1, sl
 8004dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dd2:	4651      	mov	r1, sl
 8004dd4:	00ca      	lsls	r2, r1, #3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	4642      	mov	r2, r8
 8004dde:	189b      	adds	r3, r3, r2
 8004de0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004de4:	464b      	mov	r3, r9
 8004de6:	460a      	mov	r2, r1
 8004de8:	eb42 0303 	adc.w	r3, r2, r3
 8004dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004dfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e04:	460b      	mov	r3, r1
 8004e06:	18db      	adds	r3, r3, r3
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	eb42 0303 	adc.w	r3, r2, r3
 8004e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e1a:	f7fb fdff 	bl	8000a1c <__aeabi_uldivmod>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <UART_SetConfig+0x2d4>)
 8004e24:	fba3 1302 	umull	r1, r3, r3, r2
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	2164      	movs	r1, #100	; 0x64
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	3332      	adds	r3, #50	; 0x32
 8004e36:	4a08      	ldr	r2, [pc, #32]	; (8004e58 <UART_SetConfig+0x2d4>)
 8004e38:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3c:	095b      	lsrs	r3, r3, #5
 8004e3e:	f003 0207 	and.w	r2, r3, #7
 8004e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4422      	add	r2, r4
 8004e4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e4c:	e106      	b.n	800505c <UART_SetConfig+0x4d8>
 8004e4e:	bf00      	nop
 8004e50:	40011000 	.word	0x40011000
 8004e54:	40011400 	.word	0x40011400
 8004e58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e60:	2200      	movs	r2, #0
 8004e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e6e:	4642      	mov	r2, r8
 8004e70:	464b      	mov	r3, r9
 8004e72:	1891      	adds	r1, r2, r2
 8004e74:	6239      	str	r1, [r7, #32]
 8004e76:	415b      	adcs	r3, r3
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e7e:	4641      	mov	r1, r8
 8004e80:	1854      	adds	r4, r2, r1
 8004e82:	4649      	mov	r1, r9
 8004e84:	eb43 0501 	adc.w	r5, r3, r1
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	00eb      	lsls	r3, r5, #3
 8004e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e96:	00e2      	lsls	r2, r4, #3
 8004e98:	4614      	mov	r4, r2
 8004e9a:	461d      	mov	r5, r3
 8004e9c:	4643      	mov	r3, r8
 8004e9e:	18e3      	adds	r3, r4, r3
 8004ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ea4:	464b      	mov	r3, r9
 8004ea6:	eb45 0303 	adc.w	r3, r5, r3
 8004eaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004eba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004eca:	4629      	mov	r1, r5
 8004ecc:	008b      	lsls	r3, r1, #2
 8004ece:	4621      	mov	r1, r4
 8004ed0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	008a      	lsls	r2, r1, #2
 8004ed8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004edc:	f7fb fd9e 	bl	8000a1c <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4b60      	ldr	r3, [pc, #384]	; (8005068 <UART_SetConfig+0x4e4>)
 8004ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	011c      	lsls	r4, r3, #4
 8004eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ef8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004efc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f00:	4642      	mov	r2, r8
 8004f02:	464b      	mov	r3, r9
 8004f04:	1891      	adds	r1, r2, r2
 8004f06:	61b9      	str	r1, [r7, #24]
 8004f08:	415b      	adcs	r3, r3
 8004f0a:	61fb      	str	r3, [r7, #28]
 8004f0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f10:	4641      	mov	r1, r8
 8004f12:	1851      	adds	r1, r2, r1
 8004f14:	6139      	str	r1, [r7, #16]
 8004f16:	4649      	mov	r1, r9
 8004f18:	414b      	adcs	r3, r1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f28:	4659      	mov	r1, fp
 8004f2a:	00cb      	lsls	r3, r1, #3
 8004f2c:	4651      	mov	r1, sl
 8004f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f32:	4651      	mov	r1, sl
 8004f34:	00ca      	lsls	r2, r1, #3
 8004f36:	4610      	mov	r0, r2
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	4642      	mov	r2, r8
 8004f3e:	189b      	adds	r3, r3, r2
 8004f40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f44:	464b      	mov	r3, r9
 8004f46:	460a      	mov	r2, r1
 8004f48:	eb42 0303 	adc.w	r3, r2, r3
 8004f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f68:	4649      	mov	r1, r9
 8004f6a:	008b      	lsls	r3, r1, #2
 8004f6c:	4641      	mov	r1, r8
 8004f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f72:	4641      	mov	r1, r8
 8004f74:	008a      	lsls	r2, r1, #2
 8004f76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f7a:	f7fb fd4f 	bl	8000a1c <__aeabi_uldivmod>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4611      	mov	r1, r2
 8004f84:	4b38      	ldr	r3, [pc, #224]	; (8005068 <UART_SetConfig+0x4e4>)
 8004f86:	fba3 2301 	umull	r2, r3, r3, r1
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	2264      	movs	r2, #100	; 0x64
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
 8004f92:	1acb      	subs	r3, r1, r3
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	3332      	adds	r3, #50	; 0x32
 8004f98:	4a33      	ldr	r2, [pc, #204]	; (8005068 <UART_SetConfig+0x4e4>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa4:	441c      	add	r4, r3
 8004fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004faa:	2200      	movs	r2, #0
 8004fac:	673b      	str	r3, [r7, #112]	; 0x70
 8004fae:	677a      	str	r2, [r7, #116]	; 0x74
 8004fb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	1891      	adds	r1, r2, r2
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	415b      	adcs	r3, r3
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	1851      	adds	r1, r2, r1
 8004fc8:	6039      	str	r1, [r7, #0]
 8004fca:	4649      	mov	r1, r9
 8004fcc:	414b      	adcs	r3, r1
 8004fce:	607b      	str	r3, [r7, #4]
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fdc:	4659      	mov	r1, fp
 8004fde:	00cb      	lsls	r3, r1, #3
 8004fe0:	4651      	mov	r1, sl
 8004fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fe6:	4651      	mov	r1, sl
 8004fe8:	00ca      	lsls	r2, r1, #3
 8004fea:	4610      	mov	r0, r2
 8004fec:	4619      	mov	r1, r3
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	189b      	adds	r3, r3, r2
 8004ff4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	460a      	mov	r2, r1
 8004ffa:	eb42 0303 	adc.w	r3, r2, r3
 8004ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	663b      	str	r3, [r7, #96]	; 0x60
 800500a:	667a      	str	r2, [r7, #100]	; 0x64
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005018:	4649      	mov	r1, r9
 800501a:	008b      	lsls	r3, r1, #2
 800501c:	4641      	mov	r1, r8
 800501e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005022:	4641      	mov	r1, r8
 8005024:	008a      	lsls	r2, r1, #2
 8005026:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800502a:	f7fb fcf7 	bl	8000a1c <__aeabi_uldivmod>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <UART_SetConfig+0x4e4>)
 8005034:	fba3 1302 	umull	r1, r3, r3, r2
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	2164      	movs	r1, #100	; 0x64
 800503c:	fb01 f303 	mul.w	r3, r1, r3
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	3332      	adds	r3, #50	; 0x32
 8005046:	4a08      	ldr	r2, [pc, #32]	; (8005068 <UART_SetConfig+0x4e4>)
 8005048:	fba2 2303 	umull	r2, r3, r2, r3
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	f003 020f 	and.w	r2, r3, #15
 8005052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4422      	add	r2, r4
 800505a:	609a      	str	r2, [r3, #8]
}
 800505c:	bf00      	nop
 800505e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005062:	46bd      	mov	sp, r7
 8005064:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005068:	51eb851f 	.word	0x51eb851f

0800506c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800507a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800507e:	2b84      	cmp	r3, #132	; 0x84
 8005080:	d005      	beq.n	800508e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005082:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	3303      	adds	r3, #3
 800508c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800508e:	68fb      	ldr	r3, [r7, #12]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80050a0:	f000 faf6 	bl	8005690 <vTaskStartScheduler>
  
  return osOK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	bd80      	pop	{r7, pc}

080050aa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80050aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ac:	b089      	sub	sp, #36	; 0x24
 80050ae:	af04      	add	r7, sp, #16
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d020      	beq.n	80050fe <osThreadCreate+0x54>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01c      	beq.n	80050fe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685c      	ldr	r4, [r3, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691e      	ldr	r6, [r3, #16]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff ffc8 	bl	800506c <makeFreeRtosPriority>
 80050dc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050e6:	9202      	str	r2, [sp, #8]
 80050e8:	9301      	str	r3, [sp, #4]
 80050ea:	9100      	str	r1, [sp, #0]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	4632      	mov	r2, r6
 80050f0:	4629      	mov	r1, r5
 80050f2:	4620      	mov	r0, r4
 80050f4:	f000 f8ed 	bl	80052d2 <xTaskCreateStatic>
 80050f8:	4603      	mov	r3, r0
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e01c      	b.n	8005138 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685c      	ldr	r4, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800510a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff ffaa 	bl	800506c <makeFreeRtosPriority>
 8005118:	4602      	mov	r2, r0
 800511a:	f107 030c 	add.w	r3, r7, #12
 800511e:	9301      	str	r3, [sp, #4]
 8005120:	9200      	str	r2, [sp, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	4632      	mov	r2, r6
 8005126:	4629      	mov	r1, r5
 8005128:	4620      	mov	r0, r4
 800512a:	f000 f92f 	bl	800538c <xTaskCreate>
 800512e:	4603      	mov	r3, r0
 8005130:	2b01      	cmp	r3, #1
 8005132:	d001      	beq.n	8005138 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	e000      	b.n	800513a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005138:	68fb      	ldr	r3, [r7, #12]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005142 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <osDelay+0x16>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	e000      	b.n	800515a <osDelay+0x18>
 8005158:	2301      	movs	r3, #1
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fa64 	bl	8005628 <vTaskDelay>
  
  return osOK;
 8005160:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f103 0208 	add.w	r2, r3, #8
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f04f 32ff 	mov.w	r2, #4294967295
 8005182:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f103 0208 	add.w	r2, r3, #8
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f103 0208 	add.w	r2, r3, #8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	601a      	str	r2, [r3, #0]
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005222:	d103      	bne.n	800522c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	e00c      	b.n	8005246 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3308      	adds	r3, #8
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	e002      	b.n	800523a <vListInsert+0x2e>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	429a      	cmp	r2, r3
 8005244:	d2f6      	bcs.n	8005234 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	601a      	str	r2, [r3, #0]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6892      	ldr	r2, [r2, #8]
 8005294:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6852      	ldr	r2, [r2, #4]
 800529e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d103      	bne.n	80052b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	1e5a      	subs	r2, r3, #1
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b08e      	sub	sp, #56	; 0x38
 80052d6:	af04      	add	r7, sp, #16
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10a      	bne.n	80052fc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10a      	bne.n	8005318 <xTaskCreateStatic+0x46>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	61fb      	str	r3, [r7, #28]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005318:	23a0      	movs	r3, #160	; 0xa0
 800531a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	2ba0      	cmp	r3, #160	; 0xa0
 8005320:	d00a      	beq.n	8005338 <xTaskCreateStatic+0x66>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	61bb      	str	r3, [r7, #24]
}
 8005334:	bf00      	nop
 8005336:	e7fe      	b.n	8005336 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005338:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01e      	beq.n	800537e <xTaskCreateStatic+0xac>
 8005340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005342:	2b00      	cmp	r3, #0
 8005344:	d01b      	beq.n	800537e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800534e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	2202      	movs	r2, #2
 8005354:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005358:	2300      	movs	r3, #0
 800535a:	9303      	str	r3, [sp, #12]
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	9302      	str	r3, [sp, #8]
 8005360:	f107 0314 	add.w	r3, r7, #20
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	68b9      	ldr	r1, [r7, #8]
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f851 	bl	8005418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005376:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005378:	f000 f8ec 	bl	8005554 <prvAddNewTaskToReadyList>
 800537c:	e001      	b.n	8005382 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005382:	697b      	ldr	r3, [r7, #20]
	}
 8005384:	4618      	mov	r0, r3
 8005386:	3728      	adds	r7, #40	; 0x28
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08c      	sub	sp, #48	; 0x30
 8005390:	af04      	add	r7, sp, #16
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	4613      	mov	r3, r2
 800539a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fef1 	bl	8006188 <pvPortMalloc>
 80053a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00e      	beq.n	80053cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053ae:	20a0      	movs	r0, #160	; 0xa0
 80053b0:	f000 feea 	bl	8006188 <pvPortMalloc>
 80053b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	631a      	str	r2, [r3, #48]	; 0x30
 80053c2:	e005      	b.n	80053d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80053c4:	6978      	ldr	r0, [r7, #20]
 80053c6:	f000 ffab 	bl	8006320 <vPortFree>
 80053ca:	e001      	b.n	80053d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053cc:	2300      	movs	r3, #0
 80053ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d017      	beq.n	8005406 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053de:	88fa      	ldrh	r2, [r7, #6]
 80053e0:	2300      	movs	r3, #0
 80053e2:	9303      	str	r3, [sp, #12]
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	9302      	str	r3, [sp, #8]
 80053e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f80f 	bl	8005418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053fa:	69f8      	ldr	r0, [r7, #28]
 80053fc:	f000 f8aa 	bl	8005554 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005400:	2301      	movs	r3, #1
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	e002      	b.n	800540c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005406:	f04f 33ff 	mov.w	r3, #4294967295
 800540a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800540c:	69bb      	ldr	r3, [r7, #24]
	}
 800540e:	4618      	mov	r0, r3
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005430:	3b01      	subs	r3, #1
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	f023 0307 	bic.w	r3, r3, #7
 800543e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <prvInitialiseNewTask+0x48>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	617b      	str	r3, [r7, #20]
}
 800545c:	bf00      	nop
 800545e:	e7fe      	b.n	800545e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01f      	beq.n	80054a6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	e012      	b.n	8005492 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	7819      	ldrb	r1, [r3, #0]
 8005474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	3334      	adds	r3, #52	; 0x34
 800547c:	460a      	mov	r2, r1
 800547e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	4413      	add	r3, r2
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d006      	beq.n	800549a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	3301      	adds	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	2b0f      	cmp	r3, #15
 8005496:	d9e9      	bls.n	800546c <prvInitialiseNewTask+0x54>
 8005498:	e000      	b.n	800549c <prvInitialiseNewTask+0x84>
			{
				break;
 800549a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a4:	e003      	b.n	80054ae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	2b06      	cmp	r3, #6
 80054b2:	d901      	bls.n	80054b8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054b4:	2306      	movs	r3, #6
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	2200      	movs	r2, #0
 80054c8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	3304      	adds	r3, #4
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fe6b 	bl	80051aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	3318      	adds	r3, #24
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff fe66 	bl	80051aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	f1c3 0207 	rsb	r2, r3, #7
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	334c      	adds	r3, #76	; 0x4c
 8005508:	224c      	movs	r2, #76	; 0x4c
 800550a:	2100      	movs	r1, #0
 800550c:	4618      	mov	r0, r3
 800550e:	f001 f881 	bl	8006614 <memset>
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	4a0c      	ldr	r2, [pc, #48]	; (8005548 <prvInitialiseNewTask+0x130>)
 8005516:	651a      	str	r2, [r3, #80]	; 0x50
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	4a0c      	ldr	r2, [pc, #48]	; (800554c <prvInitialiseNewTask+0x134>)
 800551c:	655a      	str	r2, [r3, #84]	; 0x54
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	4a0b      	ldr	r2, [pc, #44]	; (8005550 <prvInitialiseNewTask+0x138>)
 8005522:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	68f9      	ldr	r1, [r7, #12]
 8005528:	69b8      	ldr	r0, [r7, #24]
 800552a:	f000 fc1f 	bl	8005d6c <pxPortInitialiseStack>
 800552e:	4602      	mov	r2, r0
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800553e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005540:	bf00      	nop
 8005542:	3720      	adds	r7, #32
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	200045f8 	.word	0x200045f8
 800554c:	20004660 	.word	0x20004660
 8005550:	200046c8 	.word	0x200046c8

08005554 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800555c:	f000 fd32 	bl	8005fc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005560:	4b2a      	ldr	r3, [pc, #168]	; (800560c <prvAddNewTaskToReadyList+0xb8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3301      	adds	r3, #1
 8005566:	4a29      	ldr	r2, [pc, #164]	; (800560c <prvAddNewTaskToReadyList+0xb8>)
 8005568:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800556a:	4b29      	ldr	r3, [pc, #164]	; (8005610 <prvAddNewTaskToReadyList+0xbc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005572:	4a27      	ldr	r2, [pc, #156]	; (8005610 <prvAddNewTaskToReadyList+0xbc>)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005578:	4b24      	ldr	r3, [pc, #144]	; (800560c <prvAddNewTaskToReadyList+0xb8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d110      	bne.n	80055a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005580:	f000 facc 	bl	8005b1c <prvInitialiseTaskLists>
 8005584:	e00d      	b.n	80055a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005586:	4b23      	ldr	r3, [pc, #140]	; (8005614 <prvAddNewTaskToReadyList+0xc0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800558e:	4b20      	ldr	r3, [pc, #128]	; (8005610 <prvAddNewTaskToReadyList+0xbc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	429a      	cmp	r2, r3
 800559a:	d802      	bhi.n	80055a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800559c:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <prvAddNewTaskToReadyList+0xbc>)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055a2:	4b1d      	ldr	r3, [pc, #116]	; (8005618 <prvAddNewTaskToReadyList+0xc4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3301      	adds	r3, #1
 80055a8:	4a1b      	ldr	r2, [pc, #108]	; (8005618 <prvAddNewTaskToReadyList+0xc4>)
 80055aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	2201      	movs	r2, #1
 80055b2:	409a      	lsls	r2, r3
 80055b4:	4b19      	ldr	r3, [pc, #100]	; (800561c <prvAddNewTaskToReadyList+0xc8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	4a18      	ldr	r2, [pc, #96]	; (800561c <prvAddNewTaskToReadyList+0xc8>)
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4a15      	ldr	r2, [pc, #84]	; (8005620 <prvAddNewTaskToReadyList+0xcc>)
 80055cc:	441a      	add	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3304      	adds	r3, #4
 80055d2:	4619      	mov	r1, r3
 80055d4:	4610      	mov	r0, r2
 80055d6:	f7ff fdf5 	bl	80051c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055da:	f000 fd23 	bl	8006024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055de:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <prvAddNewTaskToReadyList+0xc0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00e      	beq.n	8005604 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055e6:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <prvAddNewTaskToReadyList+0xbc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d207      	bcs.n	8005604 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055f4:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <prvAddNewTaskToReadyList+0xd0>)
 80055f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005604:	bf00      	nop
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	200009a4 	.word	0x200009a4
 8005610:	200008a4 	.word	0x200008a4
 8005614:	200009b0 	.word	0x200009b0
 8005618:	200009c0 	.word	0x200009c0
 800561c:	200009ac 	.word	0x200009ac
 8005620:	200008a8 	.word	0x200008a8
 8005624:	e000ed04 	.word	0xe000ed04

08005628 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d017      	beq.n	800566a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800563a:	4b13      	ldr	r3, [pc, #76]	; (8005688 <vTaskDelay+0x60>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <vTaskDelay+0x30>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	60bb      	str	r3, [r7, #8]
}
 8005654:	bf00      	nop
 8005656:	e7fe      	b.n	8005656 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005658:	f000 f884 	bl	8005764 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800565c:	2100      	movs	r1, #0
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fb1e 	bl	8005ca0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005664:	f000 f88c 	bl	8005780 <xTaskResumeAll>
 8005668:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d107      	bne.n	8005680 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005670:	4b06      	ldr	r3, [pc, #24]	; (800568c <vTaskDelay+0x64>)
 8005672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005680:	bf00      	nop
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	200009cc 	.word	0x200009cc
 800568c:	e000ed04 	.word	0xe000ed04

08005690 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	; 0x28
 8005694:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800569e:	463a      	mov	r2, r7
 80056a0:	1d39      	adds	r1, r7, #4
 80056a2:	f107 0308 	add.w	r3, r7, #8
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fb fb36 	bl	8000d18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	9202      	str	r2, [sp, #8]
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	2300      	movs	r3, #0
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	2300      	movs	r3, #0
 80056bc:	460a      	mov	r2, r1
 80056be:	4921      	ldr	r1, [pc, #132]	; (8005744 <vTaskStartScheduler+0xb4>)
 80056c0:	4821      	ldr	r0, [pc, #132]	; (8005748 <vTaskStartScheduler+0xb8>)
 80056c2:	f7ff fe06 	bl	80052d2 <xTaskCreateStatic>
 80056c6:	4603      	mov	r3, r0
 80056c8:	4a20      	ldr	r2, [pc, #128]	; (800574c <vTaskStartScheduler+0xbc>)
 80056ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056cc:	4b1f      	ldr	r3, [pc, #124]	; (800574c <vTaskStartScheduler+0xbc>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056d4:	2301      	movs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e001      	b.n	80056de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d11b      	bne.n	800571c <vTaskStartScheduler+0x8c>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	613b      	str	r3, [r7, #16]
}
 80056f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056f8:	4b15      	ldr	r3, [pc, #84]	; (8005750 <vTaskStartScheduler+0xc0>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	334c      	adds	r3, #76	; 0x4c
 80056fe:	4a15      	ldr	r2, [pc, #84]	; (8005754 <vTaskStartScheduler+0xc4>)
 8005700:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005702:	4b15      	ldr	r3, [pc, #84]	; (8005758 <vTaskStartScheduler+0xc8>)
 8005704:	f04f 32ff 	mov.w	r2, #4294967295
 8005708:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800570a:	4b14      	ldr	r3, [pc, #80]	; (800575c <vTaskStartScheduler+0xcc>)
 800570c:	2201      	movs	r2, #1
 800570e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005710:	4b13      	ldr	r3, [pc, #76]	; (8005760 <vTaskStartScheduler+0xd0>)
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005716:	f000 fbb3 	bl	8005e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800571a:	e00e      	b.n	800573a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005722:	d10a      	bne.n	800573a <vTaskStartScheduler+0xaa>
	__asm volatile
 8005724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	60fb      	str	r3, [r7, #12]
}
 8005736:	bf00      	nop
 8005738:	e7fe      	b.n	8005738 <vTaskStartScheduler+0xa8>
}
 800573a:	bf00      	nop
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	0800689c 	.word	0x0800689c
 8005748:	08005aed 	.word	0x08005aed
 800574c:	200009c8 	.word	0x200009c8
 8005750:	200008a4 	.word	0x200008a4
 8005754:	20000068 	.word	0x20000068
 8005758:	200009c4 	.word	0x200009c4
 800575c:	200009b0 	.word	0x200009b0
 8005760:	200009a8 	.word	0x200009a8

08005764 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005768:	4b04      	ldr	r3, [pc, #16]	; (800577c <vTaskSuspendAll+0x18>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3301      	adds	r3, #1
 800576e:	4a03      	ldr	r2, [pc, #12]	; (800577c <vTaskSuspendAll+0x18>)
 8005770:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005772:	bf00      	nop
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	200009cc 	.word	0x200009cc

08005780 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800578a:	2300      	movs	r3, #0
 800578c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800578e:	4b41      	ldr	r3, [pc, #260]	; (8005894 <xTaskResumeAll+0x114>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <xTaskResumeAll+0x2c>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	603b      	str	r3, [r7, #0]
}
 80057a8:	bf00      	nop
 80057aa:	e7fe      	b.n	80057aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057ac:	f000 fc0a 	bl	8005fc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057b0:	4b38      	ldr	r3, [pc, #224]	; (8005894 <xTaskResumeAll+0x114>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	4a37      	ldr	r2, [pc, #220]	; (8005894 <xTaskResumeAll+0x114>)
 80057b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ba:	4b36      	ldr	r3, [pc, #216]	; (8005894 <xTaskResumeAll+0x114>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d161      	bne.n	8005886 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057c2:	4b35      	ldr	r3, [pc, #212]	; (8005898 <xTaskResumeAll+0x118>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d05d      	beq.n	8005886 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057ca:	e02e      	b.n	800582a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057cc:	4b33      	ldr	r3, [pc, #204]	; (800589c <xTaskResumeAll+0x11c>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3318      	adds	r3, #24
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fd50 	bl	800527e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3304      	adds	r3, #4
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fd4b 	bl	800527e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	2201      	movs	r2, #1
 80057ee:	409a      	lsls	r2, r3
 80057f0:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <xTaskResumeAll+0x120>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	4a2a      	ldr	r2, [pc, #168]	; (80058a0 <xTaskResumeAll+0x120>)
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4a27      	ldr	r2, [pc, #156]	; (80058a4 <xTaskResumeAll+0x124>)
 8005808:	441a      	add	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3304      	adds	r3, #4
 800580e:	4619      	mov	r1, r3
 8005810:	4610      	mov	r0, r2
 8005812:	f7ff fcd7 	bl	80051c4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581a:	4b23      	ldr	r3, [pc, #140]	; (80058a8 <xTaskResumeAll+0x128>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	429a      	cmp	r2, r3
 8005822:	d302      	bcc.n	800582a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005824:	4b21      	ldr	r3, [pc, #132]	; (80058ac <xTaskResumeAll+0x12c>)
 8005826:	2201      	movs	r2, #1
 8005828:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800582a:	4b1c      	ldr	r3, [pc, #112]	; (800589c <xTaskResumeAll+0x11c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1cc      	bne.n	80057cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005838:	f000 fa12 	bl	8005c60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800583c:	4b1c      	ldr	r3, [pc, #112]	; (80058b0 <xTaskResumeAll+0x130>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d010      	beq.n	800586a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005848:	f000 f836 	bl	80058b8 <xTaskIncrementTick>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005852:	4b16      	ldr	r3, [pc, #88]	; (80058ac <xTaskResumeAll+0x12c>)
 8005854:	2201      	movs	r2, #1
 8005856:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3b01      	subs	r3, #1
 800585c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f1      	bne.n	8005848 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005864:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <xTaskResumeAll+0x130>)
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800586a:	4b10      	ldr	r3, [pc, #64]	; (80058ac <xTaskResumeAll+0x12c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005872:	2301      	movs	r3, #1
 8005874:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005876:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <xTaskResumeAll+0x134>)
 8005878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005886:	f000 fbcd 	bl	8006024 <vPortExitCritical>

	return xAlreadyYielded;
 800588a:	68bb      	ldr	r3, [r7, #8]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	200009cc 	.word	0x200009cc
 8005898:	200009a4 	.word	0x200009a4
 800589c:	20000964 	.word	0x20000964
 80058a0:	200009ac 	.word	0x200009ac
 80058a4:	200008a8 	.word	0x200008a8
 80058a8:	200008a4 	.word	0x200008a4
 80058ac:	200009b8 	.word	0x200009b8
 80058b0:	200009b4 	.word	0x200009b4
 80058b4:	e000ed04 	.word	0xe000ed04

080058b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c2:	4b4e      	ldr	r3, [pc, #312]	; (80059fc <xTaskIncrementTick+0x144>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f040 808e 	bne.w	80059e8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058cc:	4b4c      	ldr	r3, [pc, #304]	; (8005a00 <xTaskIncrementTick+0x148>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3301      	adds	r3, #1
 80058d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058d4:	4a4a      	ldr	r2, [pc, #296]	; (8005a00 <xTaskIncrementTick+0x148>)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d120      	bne.n	8005922 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80058e0:	4b48      	ldr	r3, [pc, #288]	; (8005a04 <xTaskIncrementTick+0x14c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <xTaskIncrementTick+0x48>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	603b      	str	r3, [r7, #0]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <xTaskIncrementTick+0x46>
 8005900:	4b40      	ldr	r3, [pc, #256]	; (8005a04 <xTaskIncrementTick+0x14c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	4b40      	ldr	r3, [pc, #256]	; (8005a08 <xTaskIncrementTick+0x150>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a3e      	ldr	r2, [pc, #248]	; (8005a04 <xTaskIncrementTick+0x14c>)
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	4a3e      	ldr	r2, [pc, #248]	; (8005a08 <xTaskIncrementTick+0x150>)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	4b3d      	ldr	r3, [pc, #244]	; (8005a0c <xTaskIncrementTick+0x154>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3301      	adds	r3, #1
 800591a:	4a3c      	ldr	r2, [pc, #240]	; (8005a0c <xTaskIncrementTick+0x154>)
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	f000 f99f 	bl	8005c60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005922:	4b3b      	ldr	r3, [pc, #236]	; (8005a10 <xTaskIncrementTick+0x158>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	429a      	cmp	r2, r3
 800592a:	d348      	bcc.n	80059be <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800592c:	4b35      	ldr	r3, [pc, #212]	; (8005a04 <xTaskIncrementTick+0x14c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d104      	bne.n	8005940 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005936:	4b36      	ldr	r3, [pc, #216]	; (8005a10 <xTaskIncrementTick+0x158>)
 8005938:	f04f 32ff 	mov.w	r2, #4294967295
 800593c:	601a      	str	r2, [r3, #0]
					break;
 800593e:	e03e      	b.n	80059be <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005940:	4b30      	ldr	r3, [pc, #192]	; (8005a04 <xTaskIncrementTick+0x14c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	429a      	cmp	r2, r3
 8005956:	d203      	bcs.n	8005960 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005958:	4a2d      	ldr	r2, [pc, #180]	; (8005a10 <xTaskIncrementTick+0x158>)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800595e:	e02e      	b.n	80059be <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	3304      	adds	r3, #4
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff fc8a 	bl	800527e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596e:	2b00      	cmp	r3, #0
 8005970:	d004      	beq.n	800597c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	3318      	adds	r3, #24
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff fc81 	bl	800527e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	2201      	movs	r2, #1
 8005982:	409a      	lsls	r2, r3
 8005984:	4b23      	ldr	r3, [pc, #140]	; (8005a14 <xTaskIncrementTick+0x15c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4313      	orrs	r3, r2
 800598a:	4a22      	ldr	r2, [pc, #136]	; (8005a14 <xTaskIncrementTick+0x15c>)
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4a1f      	ldr	r2, [pc, #124]	; (8005a18 <xTaskIncrementTick+0x160>)
 800599c:	441a      	add	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	3304      	adds	r3, #4
 80059a2:	4619      	mov	r1, r3
 80059a4:	4610      	mov	r0, r2
 80059a6:	f7ff fc0d 	bl	80051c4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ae:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <xTaskIncrementTick+0x164>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d3b9      	bcc.n	800592c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80059b8:	2301      	movs	r3, #1
 80059ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059bc:	e7b6      	b.n	800592c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059be:	4b17      	ldr	r3, [pc, #92]	; (8005a1c <xTaskIncrementTick+0x164>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c4:	4914      	ldr	r1, [pc, #80]	; (8005a18 <xTaskIncrementTick+0x160>)
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	440b      	add	r3, r1
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d901      	bls.n	80059da <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80059d6:	2301      	movs	r3, #1
 80059d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059da:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <xTaskIncrementTick+0x168>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80059e2:	2301      	movs	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	e004      	b.n	80059f2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059e8:	4b0e      	ldr	r3, [pc, #56]	; (8005a24 <xTaskIncrementTick+0x16c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3301      	adds	r3, #1
 80059ee:	4a0d      	ldr	r2, [pc, #52]	; (8005a24 <xTaskIncrementTick+0x16c>)
 80059f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059f2:	697b      	ldr	r3, [r7, #20]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	200009cc 	.word	0x200009cc
 8005a00:	200009a8 	.word	0x200009a8
 8005a04:	2000095c 	.word	0x2000095c
 8005a08:	20000960 	.word	0x20000960
 8005a0c:	200009bc 	.word	0x200009bc
 8005a10:	200009c4 	.word	0x200009c4
 8005a14:	200009ac 	.word	0x200009ac
 8005a18:	200008a8 	.word	0x200008a8
 8005a1c:	200008a4 	.word	0x200008a4
 8005a20:	200009b8 	.word	0x200009b8
 8005a24:	200009b4 	.word	0x200009b4

08005a28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a2e:	4b29      	ldr	r3, [pc, #164]	; (8005ad4 <vTaskSwitchContext+0xac>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a36:	4b28      	ldr	r3, [pc, #160]	; (8005ad8 <vTaskSwitchContext+0xb0>)
 8005a38:	2201      	movs	r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a3c:	e044      	b.n	8005ac8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005a3e:	4b26      	ldr	r3, [pc, #152]	; (8005ad8 <vTaskSwitchContext+0xb0>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a44:	4b25      	ldr	r3, [pc, #148]	; (8005adc <vTaskSwitchContext+0xb4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	fab3 f383 	clz	r3, r3
 8005a50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a52:	7afb      	ldrb	r3, [r7, #11]
 8005a54:	f1c3 031f 	rsb	r3, r3, #31
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	4921      	ldr	r1, [pc, #132]	; (8005ae0 <vTaskSwitchContext+0xb8>)
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10a      	bne.n	8005a84 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	607b      	str	r3, [r7, #4]
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <vTaskSwitchContext+0x5a>
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4a14      	ldr	r2, [pc, #80]	; (8005ae0 <vTaskSwitchContext+0xb8>)
 8005a90:	4413      	add	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	605a      	str	r2, [r3, #4]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d104      	bne.n	8005ab4 <vTaskSwitchContext+0x8c>
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	605a      	str	r2, [r3, #4]
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	4a0a      	ldr	r2, [pc, #40]	; (8005ae4 <vTaskSwitchContext+0xbc>)
 8005abc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <vTaskSwitchContext+0xbc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	334c      	adds	r3, #76	; 0x4c
 8005ac4:	4a08      	ldr	r2, [pc, #32]	; (8005ae8 <vTaskSwitchContext+0xc0>)
 8005ac6:	6013      	str	r3, [r2, #0]
}
 8005ac8:	bf00      	nop
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	200009cc 	.word	0x200009cc
 8005ad8:	200009b8 	.word	0x200009b8
 8005adc:	200009ac 	.word	0x200009ac
 8005ae0:	200008a8 	.word	0x200008a8
 8005ae4:	200008a4 	.word	0x200008a4
 8005ae8:	20000068 	.word	0x20000068

08005aec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005af4:	f000 f852 	bl	8005b9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <prvIdleTask+0x28>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d9f9      	bls.n	8005af4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b00:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <prvIdleTask+0x2c>)
 8005b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b10:	e7f0      	b.n	8005af4 <prvIdleTask+0x8>
 8005b12:	bf00      	nop
 8005b14:	200008a8 	.word	0x200008a8
 8005b18:	e000ed04 	.word	0xe000ed04

08005b1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b22:	2300      	movs	r3, #0
 8005b24:	607b      	str	r3, [r7, #4]
 8005b26:	e00c      	b.n	8005b42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4a12      	ldr	r2, [pc, #72]	; (8005b7c <prvInitialiseTaskLists+0x60>)
 8005b34:	4413      	add	r3, r2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff fb17 	bl	800516a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	607b      	str	r3, [r7, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b06      	cmp	r3, #6
 8005b46:	d9ef      	bls.n	8005b28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b48:	480d      	ldr	r0, [pc, #52]	; (8005b80 <prvInitialiseTaskLists+0x64>)
 8005b4a:	f7ff fb0e 	bl	800516a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b4e:	480d      	ldr	r0, [pc, #52]	; (8005b84 <prvInitialiseTaskLists+0x68>)
 8005b50:	f7ff fb0b 	bl	800516a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b54:	480c      	ldr	r0, [pc, #48]	; (8005b88 <prvInitialiseTaskLists+0x6c>)
 8005b56:	f7ff fb08 	bl	800516a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b5a:	480c      	ldr	r0, [pc, #48]	; (8005b8c <prvInitialiseTaskLists+0x70>)
 8005b5c:	f7ff fb05 	bl	800516a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b60:	480b      	ldr	r0, [pc, #44]	; (8005b90 <prvInitialiseTaskLists+0x74>)
 8005b62:	f7ff fb02 	bl	800516a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <prvInitialiseTaskLists+0x78>)
 8005b68:	4a05      	ldr	r2, [pc, #20]	; (8005b80 <prvInitialiseTaskLists+0x64>)
 8005b6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <prvInitialiseTaskLists+0x7c>)
 8005b6e:	4a05      	ldr	r2, [pc, #20]	; (8005b84 <prvInitialiseTaskLists+0x68>)
 8005b70:	601a      	str	r2, [r3, #0]
}
 8005b72:	bf00      	nop
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	200008a8 	.word	0x200008a8
 8005b80:	20000934 	.word	0x20000934
 8005b84:	20000948 	.word	0x20000948
 8005b88:	20000964 	.word	0x20000964
 8005b8c:	20000978 	.word	0x20000978
 8005b90:	20000990 	.word	0x20000990
 8005b94:	2000095c 	.word	0x2000095c
 8005b98:	20000960 	.word	0x20000960

08005b9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ba2:	e019      	b.n	8005bd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ba4:	f000 fa0e 	bl	8005fc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba8:	4b10      	ldr	r3, [pc, #64]	; (8005bec <prvCheckTasksWaitingTermination+0x50>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff fb62 	bl	800527e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bba:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <prvCheckTasksWaitingTermination+0x54>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	4a0b      	ldr	r2, [pc, #44]	; (8005bf0 <prvCheckTasksWaitingTermination+0x54>)
 8005bc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <prvCheckTasksWaitingTermination+0x58>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	4a0a      	ldr	r2, [pc, #40]	; (8005bf4 <prvCheckTasksWaitingTermination+0x58>)
 8005bcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bce:	f000 fa29 	bl	8006024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f810 	bl	8005bf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bd8:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <prvCheckTasksWaitingTermination+0x58>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e1      	bne.n	8005ba4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005be0:	bf00      	nop
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000978 	.word	0x20000978
 8005bf0:	200009a4 	.word	0x200009a4
 8005bf4:	2000098c 	.word	0x2000098c

08005bf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	334c      	adds	r3, #76	; 0x4c
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fd0d 	bl	8006624 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d108      	bne.n	8005c26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fb81 	bl	8006320 <vPortFree>
				vPortFree( pxTCB );
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fb7e 	bl	8006320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c24:	e018      	b.n	8005c58 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d103      	bne.n	8005c38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fb75 	bl	8006320 <vPortFree>
	}
 8005c36:	e00f      	b.n	8005c58 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d00a      	beq.n	8005c58 <prvDeleteTCB+0x60>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	60fb      	str	r3, [r7, #12]
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <prvDeleteTCB+0x5e>
	}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c66:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <prvResetNextTaskUnblockTime+0x38>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d104      	bne.n	8005c7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c70:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <prvResetNextTaskUnblockTime+0x3c>)
 8005c72:	f04f 32ff 	mov.w	r2, #4294967295
 8005c76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c78:	e008      	b.n	8005c8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c7a:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <prvResetNextTaskUnblockTime+0x38>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4a04      	ldr	r2, [pc, #16]	; (8005c9c <prvResetNextTaskUnblockTime+0x3c>)
 8005c8a:	6013      	str	r3, [r2, #0]
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	2000095c 	.word	0x2000095c
 8005c9c:	200009c4 	.word	0x200009c4

08005ca0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005caa:	4b29      	ldr	r3, [pc, #164]	; (8005d50 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cb0:	4b28      	ldr	r3, [pc, #160]	; (8005d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff fae1 	bl	800527e <uxListRemove>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10b      	bne.n	8005cda <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005cc2:	4b24      	ldr	r3, [pc, #144]	; (8005d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	2201      	movs	r2, #1
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	43da      	mvns	r2, r3
 8005cd0:	4b21      	ldr	r3, [pc, #132]	; (8005d58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	4a20      	ldr	r2, [pc, #128]	; (8005d58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cd8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d10a      	bne.n	8005cf8 <prvAddCurrentTaskToDelayedList+0x58>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ce8:	4b1a      	ldr	r3, [pc, #104]	; (8005d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4619      	mov	r1, r3
 8005cf0:	481a      	ldr	r0, [pc, #104]	; (8005d5c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005cf2:	f7ff fa67 	bl	80051c4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cf6:	e026      	b.n	8005d46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d00:	4b14      	ldr	r3, [pc, #80]	; (8005d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d209      	bcs.n	8005d24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d10:	4b13      	ldr	r3, [pc, #76]	; (8005d60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	f7ff fa75 	bl	800520c <vListInsert>
}
 8005d22:	e010      	b.n	8005d46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d24:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4610      	mov	r0, r2
 8005d32:	f7ff fa6b 	bl	800520c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d36:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d202      	bcs.n	8005d46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d40:	4a09      	ldr	r2, [pc, #36]	; (8005d68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6013      	str	r3, [r2, #0]
}
 8005d46:	bf00      	nop
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200009a8 	.word	0x200009a8
 8005d54:	200008a4 	.word	0x200008a4
 8005d58:	200009ac 	.word	0x200009ac
 8005d5c:	20000990 	.word	0x20000990
 8005d60:	20000960 	.word	0x20000960
 8005d64:	2000095c 	.word	0x2000095c
 8005d68:	200009c4 	.word	0x200009c4

08005d6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3b04      	subs	r3, #4
 8005d7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3b04      	subs	r3, #4
 8005d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f023 0201 	bic.w	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3b04      	subs	r3, #4
 8005d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d9c:	4a0c      	ldr	r2, [pc, #48]	; (8005dd0 <pxPortInitialiseStack+0x64>)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3b14      	subs	r3, #20
 8005da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3b04      	subs	r3, #4
 8005db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f06f 0202 	mvn.w	r2, #2
 8005dba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3b20      	subs	r3, #32
 8005dc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	08005dd5 	.word	0x08005dd5

08005dd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005dde:	4b12      	ldr	r3, [pc, #72]	; (8005e28 <prvTaskExitError+0x54>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de6:	d00a      	beq.n	8005dfe <prvTaskExitError+0x2a>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	60fb      	str	r3, [r7, #12]
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <prvTaskExitError+0x28>
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	60bb      	str	r3, [r7, #8]
}
 8005e10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e12:	bf00      	nop
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0fc      	beq.n	8005e14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e1a:	bf00      	nop
 8005e1c:	bf00      	nop
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	20000018 	.word	0x20000018
 8005e2c:	00000000 	.word	0x00000000

08005e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e30:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <pxCurrentTCBConst2>)
 8005e32:	6819      	ldr	r1, [r3, #0]
 8005e34:	6808      	ldr	r0, [r1, #0]
 8005e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3a:	f380 8809 	msr	PSP, r0
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f04f 0000 	mov.w	r0, #0
 8005e46:	f380 8811 	msr	BASEPRI, r0
 8005e4a:	4770      	bx	lr
 8005e4c:	f3af 8000 	nop.w

08005e50 <pxCurrentTCBConst2>:
 8005e50:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop

08005e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e58:	4808      	ldr	r0, [pc, #32]	; (8005e7c <prvPortStartFirstTask+0x24>)
 8005e5a:	6800      	ldr	r0, [r0, #0]
 8005e5c:	6800      	ldr	r0, [r0, #0]
 8005e5e:	f380 8808 	msr	MSP, r0
 8005e62:	f04f 0000 	mov.w	r0, #0
 8005e66:	f380 8814 	msr	CONTROL, r0
 8005e6a:	b662      	cpsie	i
 8005e6c:	b661      	cpsie	f
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	df00      	svc	0
 8005e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e7a:	bf00      	nop
 8005e7c:	e000ed08 	.word	0xe000ed08

08005e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e86:	4b46      	ldr	r3, [pc, #280]	; (8005fa0 <xPortStartScheduler+0x120>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a46      	ldr	r2, [pc, #280]	; (8005fa4 <xPortStartScheduler+0x124>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d10a      	bne.n	8005ea6 <xPortStartScheduler+0x26>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	613b      	str	r3, [r7, #16]
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ea6:	4b3e      	ldr	r3, [pc, #248]	; (8005fa0 <xPortStartScheduler+0x120>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a3f      	ldr	r2, [pc, #252]	; (8005fa8 <xPortStartScheduler+0x128>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d10a      	bne.n	8005ec6 <xPortStartScheduler+0x46>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	60fb      	str	r3, [r7, #12]
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ec6:	4b39      	ldr	r3, [pc, #228]	; (8005fac <xPortStartScheduler+0x12c>)
 8005ec8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	22ff      	movs	r2, #255	; 0xff
 8005ed6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	4b31      	ldr	r3, [pc, #196]	; (8005fb0 <xPortStartScheduler+0x130>)
 8005eec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005eee:	4b31      	ldr	r3, [pc, #196]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005ef0:	2207      	movs	r2, #7
 8005ef2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ef4:	e009      	b.n	8005f0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ef6:	4b2f      	ldr	r3, [pc, #188]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	4a2d      	ldr	r2, [pc, #180]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005efe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f00:	78fb      	ldrb	r3, [r7, #3]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f0a:	78fb      	ldrb	r3, [r7, #3]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f12:	2b80      	cmp	r3, #128	; 0x80
 8005f14:	d0ef      	beq.n	8005ef6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f16:	4b27      	ldr	r3, [pc, #156]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f1c3 0307 	rsb	r3, r3, #7
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d00a      	beq.n	8005f38 <xPortStartScheduler+0xb8>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	60bb      	str	r3, [r7, #8]
}
 8005f34:	bf00      	nop
 8005f36:	e7fe      	b.n	8005f36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f38:	4b1e      	ldr	r3, [pc, #120]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005f40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f42:	4b1c      	ldr	r3, [pc, #112]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f4a:	4a1a      	ldr	r2, [pc, #104]	; (8005fb4 <xPortStartScheduler+0x134>)
 8005f4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f56:	4b18      	ldr	r3, [pc, #96]	; (8005fb8 <xPortStartScheduler+0x138>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a17      	ldr	r2, [pc, #92]	; (8005fb8 <xPortStartScheduler+0x138>)
 8005f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f62:	4b15      	ldr	r3, [pc, #84]	; (8005fb8 <xPortStartScheduler+0x138>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a14      	ldr	r2, [pc, #80]	; (8005fb8 <xPortStartScheduler+0x138>)
 8005f68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f6e:	f000 f8dd 	bl	800612c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f72:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <xPortStartScheduler+0x13c>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f78:	f000 f8fc 	bl	8006174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f7c:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <xPortStartScheduler+0x140>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a0f      	ldr	r2, [pc, #60]	; (8005fc0 <xPortStartScheduler+0x140>)
 8005f82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f88:	f7ff ff66 	bl	8005e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f8c:	f7ff fd4c 	bl	8005a28 <vTaskSwitchContext>
	prvTaskExitError();
 8005f90:	f7ff ff20 	bl	8005dd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	e000ed00 	.word	0xe000ed00
 8005fa4:	410fc271 	.word	0x410fc271
 8005fa8:	410fc270 	.word	0x410fc270
 8005fac:	e000e400 	.word	0xe000e400
 8005fb0:	200009d0 	.word	0x200009d0
 8005fb4:	200009d4 	.word	0x200009d4
 8005fb8:	e000ed20 	.word	0xe000ed20
 8005fbc:	20000018 	.word	0x20000018
 8005fc0:	e000ef34 	.word	0xe000ef34

08005fc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	607b      	str	r3, [r7, #4]
}
 8005fdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fde:	4b0f      	ldr	r3, [pc, #60]	; (800601c <vPortEnterCritical+0x58>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	4a0d      	ldr	r2, [pc, #52]	; (800601c <vPortEnterCritical+0x58>)
 8005fe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	; (800601c <vPortEnterCritical+0x58>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d10f      	bne.n	8006010 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <vPortEnterCritical+0x5c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <vPortEnterCritical+0x4c>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	603b      	str	r3, [r7, #0]
}
 800600c:	bf00      	nop
 800600e:	e7fe      	b.n	800600e <vPortEnterCritical+0x4a>
	}
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	20000018 	.word	0x20000018
 8006020:	e000ed04 	.word	0xe000ed04

08006024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800602a:	4b12      	ldr	r3, [pc, #72]	; (8006074 <vPortExitCritical+0x50>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <vPortExitCritical+0x24>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	607b      	str	r3, [r7, #4]
}
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006048:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <vPortExitCritical+0x50>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3b01      	subs	r3, #1
 800604e:	4a09      	ldr	r2, [pc, #36]	; (8006074 <vPortExitCritical+0x50>)
 8006050:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006052:	4b08      	ldr	r3, [pc, #32]	; (8006074 <vPortExitCritical+0x50>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d105      	bne.n	8006066 <vPortExitCritical+0x42>
 800605a:	2300      	movs	r3, #0
 800605c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006064:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000018 	.word	0x20000018
	...

08006080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006080:	f3ef 8009 	mrs	r0, PSP
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	4b15      	ldr	r3, [pc, #84]	; (80060e0 <pxCurrentTCBConst>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	f01e 0f10 	tst.w	lr, #16
 8006090:	bf08      	it	eq
 8006092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609a:	6010      	str	r0, [r2, #0]
 800609c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060a4:	f380 8811 	msr	BASEPRI, r0
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f7ff fcba 	bl	8005a28 <vTaskSwitchContext>
 80060b4:	f04f 0000 	mov.w	r0, #0
 80060b8:	f380 8811 	msr	BASEPRI, r0
 80060bc:	bc09      	pop	{r0, r3}
 80060be:	6819      	ldr	r1, [r3, #0]
 80060c0:	6808      	ldr	r0, [r1, #0]
 80060c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c6:	f01e 0f10 	tst.w	lr, #16
 80060ca:	bf08      	it	eq
 80060cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060d0:	f380 8809 	msr	PSP, r0
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	f3af 8000 	nop.w

080060e0 <pxCurrentTCBConst>:
 80060e0:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop

080060e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	607b      	str	r3, [r7, #4]
}
 8006100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006102:	f7ff fbd9 	bl	80058b8 <xTaskIncrementTick>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <SysTick_Handler+0x40>)
 800610e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	2300      	movs	r3, #0
 8006116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	f383 8811 	msr	BASEPRI, r3
}
 800611e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006120:	bf00      	nop
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <vPortSetupTimerInterrupt+0x34>)
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006136:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <vPortSetupTimerInterrupt+0x38>)
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <vPortSetupTimerInterrupt+0x3c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a0a      	ldr	r2, [pc, #40]	; (800616c <vPortSetupTimerInterrupt+0x40>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	099b      	lsrs	r3, r3, #6
 8006148:	4a09      	ldr	r2, [pc, #36]	; (8006170 <vPortSetupTimerInterrupt+0x44>)
 800614a:	3b01      	subs	r3, #1
 800614c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800614e:	4b04      	ldr	r3, [pc, #16]	; (8006160 <vPortSetupTimerInterrupt+0x34>)
 8006150:	2207      	movs	r2, #7
 8006152:	601a      	str	r2, [r3, #0]
}
 8006154:	bf00      	nop
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	e000e010 	.word	0xe000e010
 8006164:	e000e018 	.word	0xe000e018
 8006168:	2000000c 	.word	0x2000000c
 800616c:	10624dd3 	.word	0x10624dd3
 8006170:	e000e014 	.word	0xe000e014

08006174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006174:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006184 <vPortEnableVFP+0x10>
 8006178:	6801      	ldr	r1, [r0, #0]
 800617a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800617e:	6001      	str	r1, [r0, #0]
 8006180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006182:	bf00      	nop
 8006184:	e000ed88 	.word	0xe000ed88

08006188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08a      	sub	sp, #40	; 0x28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006190:	2300      	movs	r3, #0
 8006192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006194:	f7ff fae6 	bl	8005764 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006198:	4b5b      	ldr	r3, [pc, #364]	; (8006308 <pvPortMalloc+0x180>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061a0:	f000 f920 	bl	80063e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061a4:	4b59      	ldr	r3, [pc, #356]	; (800630c <pvPortMalloc+0x184>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f040 8093 	bne.w	80062d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01d      	beq.n	80061f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80061b8:	2208      	movs	r2, #8
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d014      	beq.n	80061f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f023 0307 	bic.w	r3, r3, #7
 80061d0:	3308      	adds	r3, #8
 80061d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <pvPortMalloc+0x6c>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	617b      	str	r3, [r7, #20]
}
 80061f0:	bf00      	nop
 80061f2:	e7fe      	b.n	80061f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d06e      	beq.n	80062d8 <pvPortMalloc+0x150>
 80061fa:	4b45      	ldr	r3, [pc, #276]	; (8006310 <pvPortMalloc+0x188>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d869      	bhi.n	80062d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006204:	4b43      	ldr	r3, [pc, #268]	; (8006314 <pvPortMalloc+0x18c>)
 8006206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006208:	4b42      	ldr	r3, [pc, #264]	; (8006314 <pvPortMalloc+0x18c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800620e:	e004      	b.n	800621a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	429a      	cmp	r2, r3
 8006222:	d903      	bls.n	800622c <pvPortMalloc+0xa4>
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1f1      	bne.n	8006210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800622c:	4b36      	ldr	r3, [pc, #216]	; (8006308 <pvPortMalloc+0x180>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006232:	429a      	cmp	r2, r3
 8006234:	d050      	beq.n	80062d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2208      	movs	r2, #8
 800623c:	4413      	add	r3, r2
 800623e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	1ad2      	subs	r2, r2, r3
 8006250:	2308      	movs	r3, #8
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	429a      	cmp	r2, r3
 8006256:	d91f      	bls.n	8006298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4413      	add	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <pvPortMalloc+0xf8>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	613b      	str	r3, [r7, #16]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	1ad2      	subs	r2, r2, r3
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006292:	69b8      	ldr	r0, [r7, #24]
 8006294:	f000 f908 	bl	80064a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006298:	4b1d      	ldr	r3, [pc, #116]	; (8006310 <pvPortMalloc+0x188>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	4a1b      	ldr	r2, [pc, #108]	; (8006310 <pvPortMalloc+0x188>)
 80062a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062a6:	4b1a      	ldr	r3, [pc, #104]	; (8006310 <pvPortMalloc+0x188>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <pvPortMalloc+0x190>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d203      	bcs.n	80062ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062b2:	4b17      	ldr	r3, [pc, #92]	; (8006310 <pvPortMalloc+0x188>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a18      	ldr	r2, [pc, #96]	; (8006318 <pvPortMalloc+0x190>)
 80062b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	4b13      	ldr	r3, [pc, #76]	; (800630c <pvPortMalloc+0x184>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <pvPortMalloc+0x194>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3301      	adds	r3, #1
 80062d4:	4a11      	ldr	r2, [pc, #68]	; (800631c <pvPortMalloc+0x194>)
 80062d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062d8:	f7ff fa52 	bl	8005780 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <pvPortMalloc+0x174>
	__asm volatile
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	60fb      	str	r3, [r7, #12]
}
 80062f8:	bf00      	nop
 80062fa:	e7fe      	b.n	80062fa <pvPortMalloc+0x172>
	return pvReturn;
 80062fc:	69fb      	ldr	r3, [r7, #28]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3728      	adds	r7, #40	; 0x28
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	200045e0 	.word	0x200045e0
 800630c:	200045f4 	.word	0x200045f4
 8006310:	200045e4 	.word	0x200045e4
 8006314:	200045d8 	.word	0x200045d8
 8006318:	200045e8 	.word	0x200045e8
 800631c:	200045ec 	.word	0x200045ec

08006320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d04d      	beq.n	80063ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006332:	2308      	movs	r3, #8
 8006334:	425b      	negs	r3, r3
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4413      	add	r3, r2
 800633a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	4b24      	ldr	r3, [pc, #144]	; (80063d8 <vPortFree+0xb8>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4013      	ands	r3, r2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <vPortFree+0x44>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	60fb      	str	r3, [r7, #12]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <vPortFree+0x62>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	60bb      	str	r3, [r7, #8]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	4b14      	ldr	r3, [pc, #80]	; (80063d8 <vPortFree+0xb8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01e      	beq.n	80063ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d11a      	bne.n	80063ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <vPortFree+0xb8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	43db      	mvns	r3, r3
 80063a2:	401a      	ands	r2, r3
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063a8:	f7ff f9dc 	bl	8005764 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <vPortFree+0xbc>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4413      	add	r3, r2
 80063b6:	4a09      	ldr	r2, [pc, #36]	; (80063dc <vPortFree+0xbc>)
 80063b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063ba:	6938      	ldr	r0, [r7, #16]
 80063bc:	f000 f874 	bl	80064a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063c0:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <vPortFree+0xc0>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	4a06      	ldr	r2, [pc, #24]	; (80063e0 <vPortFree+0xc0>)
 80063c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063ca:	f7ff f9d9 	bl	8005780 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063ce:	bf00      	nop
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	200045f4 	.word	0x200045f4
 80063dc:	200045e4 	.word	0x200045e4
 80063e0:	200045f0 	.word	0x200045f0

080063e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80063ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063f0:	4b27      	ldr	r3, [pc, #156]	; (8006490 <prvHeapInit+0xac>)
 80063f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00c      	beq.n	8006418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3307      	adds	r3, #7
 8006402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0307 	bic.w	r3, r3, #7
 800640a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <prvHeapInit+0xac>)
 8006414:	4413      	add	r3, r2
 8006416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800641c:	4a1d      	ldr	r2, [pc, #116]	; (8006494 <prvHeapInit+0xb0>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006422:	4b1c      	ldr	r3, [pc, #112]	; (8006494 <prvHeapInit+0xb0>)
 8006424:	2200      	movs	r2, #0
 8006426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	4413      	add	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006430:	2208      	movs	r2, #8
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0307 	bic.w	r3, r3, #7
 800643e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4a15      	ldr	r2, [pc, #84]	; (8006498 <prvHeapInit+0xb4>)
 8006444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006446:	4b14      	ldr	r3, [pc, #80]	; (8006498 <prvHeapInit+0xb4>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800644e:	4b12      	ldr	r3, [pc, #72]	; (8006498 <prvHeapInit+0xb4>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	1ad2      	subs	r2, r2, r3
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006464:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <prvHeapInit+0xb4>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	4a0a      	ldr	r2, [pc, #40]	; (800649c <prvHeapInit+0xb8>)
 8006472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	4a09      	ldr	r2, [pc, #36]	; (80064a0 <prvHeapInit+0xbc>)
 800647a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800647c:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <prvHeapInit+0xc0>)
 800647e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006482:	601a      	str	r2, [r3, #0]
}
 8006484:	bf00      	nop
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	200009d8 	.word	0x200009d8
 8006494:	200045d8 	.word	0x200045d8
 8006498:	200045e0 	.word	0x200045e0
 800649c:	200045e8 	.word	0x200045e8
 80064a0:	200045e4 	.word	0x200045e4
 80064a4:	200045f4 	.word	0x200045f4

080064a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064b0:	4b28      	ldr	r3, [pc, #160]	; (8006554 <prvInsertBlockIntoFreeList+0xac>)
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	e002      	b.n	80064bc <prvInsertBlockIntoFreeList+0x14>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d8f7      	bhi.n	80064b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	4413      	add	r3, r2
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d108      	bne.n	80064ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	441a      	add	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	441a      	add	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d118      	bne.n	8006530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	4b15      	ldr	r3, [pc, #84]	; (8006558 <prvInsertBlockIntoFreeList+0xb0>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d00d      	beq.n	8006526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	441a      	add	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	e008      	b.n	8006538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006526:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <prvInsertBlockIntoFreeList+0xb0>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	e003      	b.n	8006538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	429a      	cmp	r2, r3
 800653e:	d002      	beq.n	8006546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006546:	bf00      	nop
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	200045d8 	.word	0x200045d8
 8006558:	200045e0 	.word	0x200045e0

0800655c <__itoa>:
 800655c:	1e93      	subs	r3, r2, #2
 800655e:	2b22      	cmp	r3, #34	; 0x22
 8006560:	b510      	push	{r4, lr}
 8006562:	460c      	mov	r4, r1
 8006564:	d904      	bls.n	8006570 <__itoa+0x14>
 8006566:	2300      	movs	r3, #0
 8006568:	700b      	strb	r3, [r1, #0]
 800656a:	461c      	mov	r4, r3
 800656c:	4620      	mov	r0, r4
 800656e:	bd10      	pop	{r4, pc}
 8006570:	2a0a      	cmp	r2, #10
 8006572:	d109      	bne.n	8006588 <__itoa+0x2c>
 8006574:	2800      	cmp	r0, #0
 8006576:	da07      	bge.n	8006588 <__itoa+0x2c>
 8006578:	232d      	movs	r3, #45	; 0x2d
 800657a:	700b      	strb	r3, [r1, #0]
 800657c:	4240      	negs	r0, r0
 800657e:	2101      	movs	r1, #1
 8006580:	4421      	add	r1, r4
 8006582:	f000 f805 	bl	8006590 <__utoa>
 8006586:	e7f1      	b.n	800656c <__itoa+0x10>
 8006588:	2100      	movs	r1, #0
 800658a:	e7f9      	b.n	8006580 <__itoa+0x24>

0800658c <itoa>:
 800658c:	f7ff bfe6 	b.w	800655c <__itoa>

08006590 <__utoa>:
 8006590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006592:	4c1f      	ldr	r4, [pc, #124]	; (8006610 <__utoa+0x80>)
 8006594:	b08b      	sub	sp, #44	; 0x2c
 8006596:	4605      	mov	r5, r0
 8006598:	460b      	mov	r3, r1
 800659a:	466e      	mov	r6, sp
 800659c:	f104 0c20 	add.w	ip, r4, #32
 80065a0:	6820      	ldr	r0, [r4, #0]
 80065a2:	6861      	ldr	r1, [r4, #4]
 80065a4:	4637      	mov	r7, r6
 80065a6:	c703      	stmia	r7!, {r0, r1}
 80065a8:	3408      	adds	r4, #8
 80065aa:	4564      	cmp	r4, ip
 80065ac:	463e      	mov	r6, r7
 80065ae:	d1f7      	bne.n	80065a0 <__utoa+0x10>
 80065b0:	7921      	ldrb	r1, [r4, #4]
 80065b2:	7139      	strb	r1, [r7, #4]
 80065b4:	1e91      	subs	r1, r2, #2
 80065b6:	6820      	ldr	r0, [r4, #0]
 80065b8:	6038      	str	r0, [r7, #0]
 80065ba:	2922      	cmp	r1, #34	; 0x22
 80065bc:	f04f 0100 	mov.w	r1, #0
 80065c0:	d904      	bls.n	80065cc <__utoa+0x3c>
 80065c2:	7019      	strb	r1, [r3, #0]
 80065c4:	460b      	mov	r3, r1
 80065c6:	4618      	mov	r0, r3
 80065c8:	b00b      	add	sp, #44	; 0x2c
 80065ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065cc:	1e58      	subs	r0, r3, #1
 80065ce:	4684      	mov	ip, r0
 80065d0:	fbb5 f7f2 	udiv	r7, r5, r2
 80065d4:	fb02 5617 	mls	r6, r2, r7, r5
 80065d8:	3628      	adds	r6, #40	; 0x28
 80065da:	446e      	add	r6, sp
 80065dc:	460c      	mov	r4, r1
 80065de:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80065e2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80065e6:	462e      	mov	r6, r5
 80065e8:	42b2      	cmp	r2, r6
 80065ea:	f101 0101 	add.w	r1, r1, #1
 80065ee:	463d      	mov	r5, r7
 80065f0:	d9ee      	bls.n	80065d0 <__utoa+0x40>
 80065f2:	2200      	movs	r2, #0
 80065f4:	545a      	strb	r2, [r3, r1]
 80065f6:	1919      	adds	r1, r3, r4
 80065f8:	1aa5      	subs	r5, r4, r2
 80065fa:	42aa      	cmp	r2, r5
 80065fc:	dae3      	bge.n	80065c6 <__utoa+0x36>
 80065fe:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006602:	780e      	ldrb	r6, [r1, #0]
 8006604:	7006      	strb	r6, [r0, #0]
 8006606:	3201      	adds	r2, #1
 8006608:	f801 5901 	strb.w	r5, [r1], #-1
 800660c:	e7f4      	b.n	80065f8 <__utoa+0x68>
 800660e:	bf00      	nop
 8006610:	08007618 	.word	0x08007618

08006614 <memset>:
 8006614:	4402      	add	r2, r0
 8006616:	4603      	mov	r3, r0
 8006618:	4293      	cmp	r3, r2
 800661a:	d100      	bne.n	800661e <memset+0xa>
 800661c:	4770      	bx	lr
 800661e:	f803 1b01 	strb.w	r1, [r3], #1
 8006622:	e7f9      	b.n	8006618 <memset+0x4>

08006624 <_reclaim_reent>:
 8006624:	4b29      	ldr	r3, [pc, #164]	; (80066cc <_reclaim_reent+0xa8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4283      	cmp	r3, r0
 800662a:	b570      	push	{r4, r5, r6, lr}
 800662c:	4604      	mov	r4, r0
 800662e:	d04b      	beq.n	80066c8 <_reclaim_reent+0xa4>
 8006630:	69c3      	ldr	r3, [r0, #28]
 8006632:	b143      	cbz	r3, 8006646 <_reclaim_reent+0x22>
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d144      	bne.n	80066c4 <_reclaim_reent+0xa0>
 800663a:	69e3      	ldr	r3, [r4, #28]
 800663c:	6819      	ldr	r1, [r3, #0]
 800663e:	b111      	cbz	r1, 8006646 <_reclaim_reent+0x22>
 8006640:	4620      	mov	r0, r4
 8006642:	f000 f86b 	bl	800671c <_free_r>
 8006646:	6961      	ldr	r1, [r4, #20]
 8006648:	b111      	cbz	r1, 8006650 <_reclaim_reent+0x2c>
 800664a:	4620      	mov	r0, r4
 800664c:	f000 f866 	bl	800671c <_free_r>
 8006650:	69e1      	ldr	r1, [r4, #28]
 8006652:	b111      	cbz	r1, 800665a <_reclaim_reent+0x36>
 8006654:	4620      	mov	r0, r4
 8006656:	f000 f861 	bl	800671c <_free_r>
 800665a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800665c:	b111      	cbz	r1, 8006664 <_reclaim_reent+0x40>
 800665e:	4620      	mov	r0, r4
 8006660:	f000 f85c 	bl	800671c <_free_r>
 8006664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006666:	b111      	cbz	r1, 800666e <_reclaim_reent+0x4a>
 8006668:	4620      	mov	r0, r4
 800666a:	f000 f857 	bl	800671c <_free_r>
 800666e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006670:	b111      	cbz	r1, 8006678 <_reclaim_reent+0x54>
 8006672:	4620      	mov	r0, r4
 8006674:	f000 f852 	bl	800671c <_free_r>
 8006678:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800667a:	b111      	cbz	r1, 8006682 <_reclaim_reent+0x5e>
 800667c:	4620      	mov	r0, r4
 800667e:	f000 f84d 	bl	800671c <_free_r>
 8006682:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006684:	b111      	cbz	r1, 800668c <_reclaim_reent+0x68>
 8006686:	4620      	mov	r0, r4
 8006688:	f000 f848 	bl	800671c <_free_r>
 800668c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800668e:	b111      	cbz	r1, 8006696 <_reclaim_reent+0x72>
 8006690:	4620      	mov	r0, r4
 8006692:	f000 f843 	bl	800671c <_free_r>
 8006696:	6a23      	ldr	r3, [r4, #32]
 8006698:	b1b3      	cbz	r3, 80066c8 <_reclaim_reent+0xa4>
 800669a:	4620      	mov	r0, r4
 800669c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80066a0:	4718      	bx	r3
 80066a2:	5949      	ldr	r1, [r1, r5]
 80066a4:	b941      	cbnz	r1, 80066b8 <_reclaim_reent+0x94>
 80066a6:	3504      	adds	r5, #4
 80066a8:	69e3      	ldr	r3, [r4, #28]
 80066aa:	2d80      	cmp	r5, #128	; 0x80
 80066ac:	68d9      	ldr	r1, [r3, #12]
 80066ae:	d1f8      	bne.n	80066a2 <_reclaim_reent+0x7e>
 80066b0:	4620      	mov	r0, r4
 80066b2:	f000 f833 	bl	800671c <_free_r>
 80066b6:	e7c0      	b.n	800663a <_reclaim_reent+0x16>
 80066b8:	680e      	ldr	r6, [r1, #0]
 80066ba:	4620      	mov	r0, r4
 80066bc:	f000 f82e 	bl	800671c <_free_r>
 80066c0:	4631      	mov	r1, r6
 80066c2:	e7ef      	b.n	80066a4 <_reclaim_reent+0x80>
 80066c4:	2500      	movs	r5, #0
 80066c6:	e7ef      	b.n	80066a8 <_reclaim_reent+0x84>
 80066c8:	bd70      	pop	{r4, r5, r6, pc}
 80066ca:	bf00      	nop
 80066cc:	20000068 	.word	0x20000068

080066d0 <__libc_init_array>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	4d0d      	ldr	r5, [pc, #52]	; (8006708 <__libc_init_array+0x38>)
 80066d4:	4c0d      	ldr	r4, [pc, #52]	; (800670c <__libc_init_array+0x3c>)
 80066d6:	1b64      	subs	r4, r4, r5
 80066d8:	10a4      	asrs	r4, r4, #2
 80066da:	2600      	movs	r6, #0
 80066dc:	42a6      	cmp	r6, r4
 80066de:	d109      	bne.n	80066f4 <__libc_init_array+0x24>
 80066e0:	4d0b      	ldr	r5, [pc, #44]	; (8006710 <__libc_init_array+0x40>)
 80066e2:	4c0c      	ldr	r4, [pc, #48]	; (8006714 <__libc_init_array+0x44>)
 80066e4:	f000 f872 	bl	80067cc <_init>
 80066e8:	1b64      	subs	r4, r4, r5
 80066ea:	10a4      	asrs	r4, r4, #2
 80066ec:	2600      	movs	r6, #0
 80066ee:	42a6      	cmp	r6, r4
 80066f0:	d105      	bne.n	80066fe <__libc_init_array+0x2e>
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f8:	4798      	blx	r3
 80066fa:	3601      	adds	r6, #1
 80066fc:	e7ee      	b.n	80066dc <__libc_init_array+0xc>
 80066fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006702:	4798      	blx	r3
 8006704:	3601      	adds	r6, #1
 8006706:	e7f2      	b.n	80066ee <__libc_init_array+0x1e>
 8006708:	08007648 	.word	0x08007648
 800670c:	08007648 	.word	0x08007648
 8006710:	08007648 	.word	0x08007648
 8006714:	0800764c 	.word	0x0800764c

08006718 <__retarget_lock_acquire_recursive>:
 8006718:	4770      	bx	lr

0800671a <__retarget_lock_release_recursive>:
 800671a:	4770      	bx	lr

0800671c <_free_r>:
 800671c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800671e:	2900      	cmp	r1, #0
 8006720:	d044      	beq.n	80067ac <_free_r+0x90>
 8006722:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006726:	9001      	str	r0, [sp, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f1a1 0404 	sub.w	r4, r1, #4
 800672e:	bfb8      	it	lt
 8006730:	18e4      	addlt	r4, r4, r3
 8006732:	f000 f83f 	bl	80067b4 <__malloc_lock>
 8006736:	4a1e      	ldr	r2, [pc, #120]	; (80067b0 <_free_r+0x94>)
 8006738:	9801      	ldr	r0, [sp, #4]
 800673a:	6813      	ldr	r3, [r2, #0]
 800673c:	b933      	cbnz	r3, 800674c <_free_r+0x30>
 800673e:	6063      	str	r3, [r4, #4]
 8006740:	6014      	str	r4, [r2, #0]
 8006742:	b003      	add	sp, #12
 8006744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006748:	f000 b83a 	b.w	80067c0 <__malloc_unlock>
 800674c:	42a3      	cmp	r3, r4
 800674e:	d908      	bls.n	8006762 <_free_r+0x46>
 8006750:	6825      	ldr	r5, [r4, #0]
 8006752:	1961      	adds	r1, r4, r5
 8006754:	428b      	cmp	r3, r1
 8006756:	bf01      	itttt	eq
 8006758:	6819      	ldreq	r1, [r3, #0]
 800675a:	685b      	ldreq	r3, [r3, #4]
 800675c:	1949      	addeq	r1, r1, r5
 800675e:	6021      	streq	r1, [r4, #0]
 8006760:	e7ed      	b.n	800673e <_free_r+0x22>
 8006762:	461a      	mov	r2, r3
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	b10b      	cbz	r3, 800676c <_free_r+0x50>
 8006768:	42a3      	cmp	r3, r4
 800676a:	d9fa      	bls.n	8006762 <_free_r+0x46>
 800676c:	6811      	ldr	r1, [r2, #0]
 800676e:	1855      	adds	r5, r2, r1
 8006770:	42a5      	cmp	r5, r4
 8006772:	d10b      	bne.n	800678c <_free_r+0x70>
 8006774:	6824      	ldr	r4, [r4, #0]
 8006776:	4421      	add	r1, r4
 8006778:	1854      	adds	r4, r2, r1
 800677a:	42a3      	cmp	r3, r4
 800677c:	6011      	str	r1, [r2, #0]
 800677e:	d1e0      	bne.n	8006742 <_free_r+0x26>
 8006780:	681c      	ldr	r4, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	6053      	str	r3, [r2, #4]
 8006786:	440c      	add	r4, r1
 8006788:	6014      	str	r4, [r2, #0]
 800678a:	e7da      	b.n	8006742 <_free_r+0x26>
 800678c:	d902      	bls.n	8006794 <_free_r+0x78>
 800678e:	230c      	movs	r3, #12
 8006790:	6003      	str	r3, [r0, #0]
 8006792:	e7d6      	b.n	8006742 <_free_r+0x26>
 8006794:	6825      	ldr	r5, [r4, #0]
 8006796:	1961      	adds	r1, r4, r5
 8006798:	428b      	cmp	r3, r1
 800679a:	bf04      	itt	eq
 800679c:	6819      	ldreq	r1, [r3, #0]
 800679e:	685b      	ldreq	r3, [r3, #4]
 80067a0:	6063      	str	r3, [r4, #4]
 80067a2:	bf04      	itt	eq
 80067a4:	1949      	addeq	r1, r1, r5
 80067a6:	6021      	streq	r1, [r4, #0]
 80067a8:	6054      	str	r4, [r2, #4]
 80067aa:	e7ca      	b.n	8006742 <_free_r+0x26>
 80067ac:	b003      	add	sp, #12
 80067ae:	bd30      	pop	{r4, r5, pc}
 80067b0:	20004734 	.word	0x20004734

080067b4 <__malloc_lock>:
 80067b4:	4801      	ldr	r0, [pc, #4]	; (80067bc <__malloc_lock+0x8>)
 80067b6:	f7ff bfaf 	b.w	8006718 <__retarget_lock_acquire_recursive>
 80067ba:	bf00      	nop
 80067bc:	20004730 	.word	0x20004730

080067c0 <__malloc_unlock>:
 80067c0:	4801      	ldr	r0, [pc, #4]	; (80067c8 <__malloc_unlock+0x8>)
 80067c2:	f7ff bfaa 	b.w	800671a <__retarget_lock_release_recursive>
 80067c6:	bf00      	nop
 80067c8:	20004730 	.word	0x20004730

080067cc <_init>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	bf00      	nop
 80067d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d2:	bc08      	pop	{r3}
 80067d4:	469e      	mov	lr, r3
 80067d6:	4770      	bx	lr

080067d8 <_fini>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	bf00      	nop
 80067dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067de:	bc08      	pop	{r3}
 80067e0:	469e      	mov	lr, r3
 80067e2:	4770      	bx	lr
